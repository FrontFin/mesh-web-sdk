{
  "openapi": "3.0.1",
  "info": {
    "title": "Front Financial Integration Catalog API",
    "description": "Front Integration Catalog allows users of client applications to connect accounts of financial institutions. Front Integration Catalog handles credential validation, multi-factor authentication, and error handling for each institution. After the account is connected, Front Integration Catalog allows client applications to get account information, such as holdings, transactions, balances.",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://integration-api.getfront.com"
    }
  ],
  "paths": {
    "/api/v1/assets/{assetType}": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get available assets",
        "parameters": [
          {
            "name": "assetType",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "equity",
                "cryptocurrency"
              ],
              "allOf": [
                {
                  "$ref": "#/components/schemas/AssetType"
                }
              ]
            }
          },
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Count",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPaginationResponseIApiResult"
                },
                "example": {"content":{"items":[{"symbol":"AAPL","name":"Apple Inc","type":"equity"},{"symbol":"MSFT","name":"Microsoft Inc","type":"equity"}],"total":5},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"badRequest","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/assets/equity/{symbol}/price": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get symbol price",
        "parameters": [
          {
            "name": "symbol",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BPriceInfoIApiResult"
                },
                "example": {"content":{"items":[{"symbol":"AAPL","name":"Apple Inc","type":"equity"},{"symbol":"MSFT","name":"Microsoft Inc","type":"equity"}],"total":5},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"badRequest","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/balance/get": {
      "post": {
        "tags": [
          "Balance"
        ],
        "summary": "Get account balance",
        "description": "Get real-time account fiat balances.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BalanceBrokerBaseRequest"
                  }
                ]
              },
              "example": {"authToken":"Secret authentication token","type":"robinhood"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerAccountBalanceModelIApiResult"
                },
                "example": {"content":{"balances":[{"cash":158.5,"buyingPower":258.5,"currencyCode":"USD"},{"cash":10,"buyingPower":10,"currencyCode":"EUR"}],"totalCashUsdValue":10,"totalBuyingPowerUsdValue":10},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"badRequest","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/balance/portfolio": {
      "get": {
        "tags": [
          "Balance"
        ],
        "summary": "Get aggregated portfolio fiat balances",
        "description": "Get cached aggregated fiat balances from all connected integrations.",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "description": "End user ID to get the aggregated portfolio for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BFiatPortfolioModelIApiResult"
                },
                "example": {"content":{"fiatBalances":[{"symbol":"USD","cash":3.099,"buyingPower":3.099},{"symbol":"EUR","cash":-102.880,"buyingPower":1293.596}]},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"badRequest","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/cataloglink": {
      "get": {
        "tags": [
          "Managed Account Authentication"
        ],
        "summary": "Get catalog link",
        "description": "Get personalized catalog link for client",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "description": "A unique Id representing the end user. Typically this will be a user Id from the\r\nclient application. Personally identifiable information, such as an email address or phone number,\r\nshould not be used. 50 characters length maximum.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "BrokerType",
            "in": "query",
            "description": "Type of integration to redirect to. Will redirect to catalog if not provided.\r\nNot supported types: DeFiWallet, CryptocurrencyAddress, CryptocurrencyWallet.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BrokerType"
                }
              ]
            }
          },
          {
            "name": "EnableTransfers",
            "in": "query",
            "description": "Link Configuration identifier - an optional paramater for used configuration.\r\nIf not provided default configuration with all avaialbe integrations will be used.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RestrictMultipleAccounts",
            "in": "query",
            "description": "The final screen of Link allows users to “continue” back to your app or “Link another account.”\r\nIf this param is present then this button will be hidden.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Catalog link created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogLinkIApiResult"
                },
                "example": {"content":{"url":"https://web.getfront.com/broker-connect?auth_code={authCode}","iFrameUrl":"https://web.getfront.com/b2b-iframe/{clientId}/broker-connect?auth_code={authCode}"},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "404": {
            "description": "API Client not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"notFound","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "400": {
            "description": "BadRequest can happen in following cases:\r\n<list type=\"number\"><item><description>userId parameter not specified</description></item><item><description>Callback url parameter is invalid</description></item><item><description>Client does not have callback url specified</description></item></list>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"badRequest","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Managed Account Authentication"
        ],
        "summary": "Get catalog link with parameters",
        "description": "Get personalized catalog link for client supplying parameters for Link actions, such as transfers",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "description": "A unique Id representing the end user. Typically this will be a user Id from the\r\nclient application. Personally identifiable information, such as an email address or phone number,\r\nshould not be used. 50 characters length maximum.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "BrokerType",
            "in": "query",
            "description": "Type of integration to redirect to. Will redirect to catalog if not provided.\r\nNot supported types: DeFiWallet, CryptocurrencyAddress, CryptocurrencyWallet.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BrokerType"
                }
              ]
            }
          },
          {
            "name": "EnableTransfers",
            "in": "query",
            "description": "Link Configuration identifier - an optional paramater for used configuration.\r\nIf not provided default configuration with all avaialbe integrations will be used.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RestrictMultipleAccounts",
            "in": "query",
            "description": "The final screen of Link allows users to “continue” back to your app or “Link another account.”\r\nIf this param is present then this button will be hidden.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "Data to execute transfer.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitializeTransfersForLinkRequest"
                  }
                ]
              },
              "example": {"toAddresses":[{"networkId":"e3c7fdd8-b1fc-4e51-85ae-bb276e075611","symbol":"ETH","address":"0x00000000000000000000000"},{"networkId":"e3c7fdd8-b1fc-4e51-85ae-bb276e075611","symbol":"USDC","address":"0x00000000000000000000000"},{"networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"MATIC","address":"0x00000000000000000000000"},{"networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"USDC","address":"0x00000000000000000000000"}]}
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitializeTransfersForLinkRequest"
                  }
                ]
              },
              "example": {"toAddresses":[{"networkId":"e3c7fdd8-b1fc-4e51-85ae-bb276e075611","symbol":"ETH","address":"0x00000000000000000000000"},{"networkId":"e3c7fdd8-b1fc-4e51-85ae-bb276e075611","symbol":"USDC","address":"0x00000000000000000000000"},{"networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"MATIC","address":"0x00000000000000000000000"},{"networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"USDC","address":"0x00000000000000000000000"}]}
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitializeTransfersForLinkRequest"
                  }
                ]
              },
              "example": {"toAddresses":[{"networkId":"e3c7fdd8-b1fc-4e51-85ae-bb276e075611","symbol":"ETH","address":"0x00000000000000000000000"},{"networkId":"e3c7fdd8-b1fc-4e51-85ae-bb276e075611","symbol":"USDC","address":"0x00000000000000000000000"},{"networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"MATIC","address":"0x00000000000000000000000"},{"networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"USDC","address":"0x00000000000000000000000"}]}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Catalog link created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogLinkIApiResult"
                },
                "example": {"content":{"url":"https://web.getfront.com/broker-connect?auth_code={authCode}","iFrameUrl":"https://web.getfront.com/b2b-iframe/{clientId}/broker-connect?auth_code={authCode}"},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "404": {
            "description": "API Client not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"notFound","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "400": {
            "description": "BadRequest can happen in following cases:\r\n<list type=\"number\"><item><description>userId parameter not specified</description></item><item><description>Callback url parameter is invalid</description></item><item><description>Client does not have callback url specified</description></item></list>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"badRequest","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v1/linktoken": {
      "post": {
        "tags": [
          "Managed Account Authentication"
        ],
        "summary": "Get Link token with parameters",
        "description": "Get a short lived, one-time use token for initializing a Link session using the client-side SDKs",
        "requestBody": {
          "description": "Create Link token request.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetLinkTokenRequest"
                  }
                ]
              },
              "example": {"userId":"UserId","configurationId":"18a20b11-e47f-43b9-8546-94284e9ee547","restrictMultipleAccounts":true,"transferOptions":{"toAddresses":[{"networkId":"e3c7fdd8-b1fc-4e51-85ae-bb276e075611","symbol":"ETH","address":"0x00000000000000000000000"},{"networkId":"e3c7fdd8-b1fc-4e51-85ae-bb276e075611","symbol":"USDC","address":"0x00000000000000000000000"},{"networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"MATIC","address":"0x00000000000000000000000"},{"networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"USDC","address":"0x00000000000000000000000"}],"amountInFiat":10}}
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetLinkTokenRequest"
                  }
                ]
              },
              "example": {"userId":"UserId","configurationId":"18a20b11-e47f-43b9-8546-94284e9ee547","restrictMultipleAccounts":true,"transferOptions":{"toAddresses":[{"networkId":"e3c7fdd8-b1fc-4e51-85ae-bb276e075611","symbol":"ETH","address":"0x00000000000000000000000"},{"networkId":"e3c7fdd8-b1fc-4e51-85ae-bb276e075611","symbol":"USDC","address":"0x00000000000000000000000"},{"networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"MATIC","address":"0x00000000000000000000000"},{"networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"USDC","address":"0x00000000000000000000000"}],"amountInFiat":10}}
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetLinkTokenRequest"
                  }
                ]
              },
              "example": {"userId":"UserId","configurationId":"18a20b11-e47f-43b9-8546-94284e9ee547","restrictMultipleAccounts":true,"transferOptions":{"toAddresses":[{"networkId":"e3c7fdd8-b1fc-4e51-85ae-bb276e075611","symbol":"ETH","address":"0x00000000000000000000000"},{"networkId":"e3c7fdd8-b1fc-4e51-85ae-bb276e075611","symbol":"USDC","address":"0x00000000000000000000000"},{"networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"MATIC","address":"0x00000000000000000000000"},{"networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"USDC","address":"0x00000000000000000000000"}],"amountInFiat":10}}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Link token created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkTokenModelIApiResult"
                },
                "example": {"content":{"linkToken":"aHR0cHM6Ly93ZWIuZ2V0ZnJvbnQuY29tL2IyYi1pZnJhbWUve2NsaWVudElkfS9icm9rZXItY29ubmVjdD9hdXRoX2NvZGU9e2F1dGhDb2RlfQ=="},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "404": {
            "description": "API Client not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"notFound","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "400": {
            "description": "BadRequest can happen in following cases:\r\n<list type=\"number\"><item><description>userId parameter not specified</description></item></list>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"badRequest","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/token/refresh": {
      "post": {
        "tags": [
          "Managed Account Authentication"
        ],
        "summary": "Refresh auth token",
        "description": "Refresh auth token of the connected institution.\r\nSome institutions do not require tokens to be refreshed.\r\n            \r\nThe following institutions require custom flows:\r\n            \r\nWeBull: AuthToken should be provided along with the RefreshToken\r\n            \r\nTdAmeritrade: refresh token should also be refreshed.\r\nCreateNewRefreshToken parameter should be set to true in order\r\nto refresh the refresh token for TdAmeritrade.\r\n            \r\nVanguard: security settings may activate MFA, requiring user action.\r\nIf MFA is triggered, a second refresh request should be sent.\r\nSecond request should contain MFA code and access token obtained from initial response.\r\n            \r\nBitfinex Direct: Expired Access Token is used as Refresh token. Use this endpoint to\r\ntrade it for a new one",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BrokerRefreshTokenRequest"
                  }
                ]
              },
              "example": {"refreshToken":"Secret refresh token","type":"coinbase"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerRefreshTokenResponseIApiResult"
                },
                "example": {"content":{"status":"succeeded","expiresInSeconds":86400,"brokerAccountTokens":[{"accessToken":"New secret token","refreshToken":"New secret refresh token"}]},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"badRequest","message":"Unauthorized token","displayMessage":"Could not refresh the authentication token. The provided data is not correct","errorType":"badRequest"}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/account": {
      "delete": {
        "tags": [
          "Managed Account Authentication"
        ],
        "summary": "Remove connection",
        "description": "Remove connection to the financial institution and erase all related data completely.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BrokerBaseRequest"
                  }
                ]
              },
              "example": {"authToken":"Secret authentication token","type":"robinhood"}
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BrokerBaseRequest"
                  }
                ]
              },
              "example": {"authToken":"Secret authentication token","type":"robinhood"}
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BrokerBaseRequest"
                  }
                ]
              },
              "example": {"authToken":"Secret authentication token","type":"robinhood"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IApiResult"
                },
                "example": {"status":"ok","message":"","errorType":""}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"badRequest","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/status": {
      "get": {
        "tags": [
          "Managed Account Authentication"
        ],
        "summary": "Get health status",
        "description": "Get the list of supported institutions and their health statuses.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokersHealthStatusListIApiResult"
                },
                "example": {"content":[{"type":"robinhood","name":"Robinhood","isUp":true,"supportedProducts":["balance","holdings","identity","orders","transfers"]},{"type":"celsius","name":"Celsius","isUp":false,"description":"Temporarily disabled","downTimeStart":1655891444,"supportedProducts":["balance","orders","transfers","holdings"]},{"type":"deFiWallet","name":"MetaMask","isUp":false,"supportedProducts":["transfers","holdings"],"deFiWalletData":{"id":"00000000-0000-0000-0000-000000000000","name":"MetaMask"}}],"status":"ok","message":"","errorType":""}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/authenticationSchemes": {
      "get": {
        "tags": [
          "Self Managed Account Authentication"
        ],
        "summary": "Get authentication schemes",
        "description": "Get authentication schemes of available integrations to perform authentication programmatically (not using\r\nthe Web Catalog UI).",
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerAuthenticationSchemeIReadOnlyCollectionIApiResult"
                },
                "example": {"content":[{"brokerType":"coinbasePro","authenticationSchemeType":"apiKey","initialAuthenticationModel":{"fields":[{"name":"Username","description":"API key"},{"name":"Password","description":"Secret key"},{"name":"AuthToken","description":"Passphrase"},{"name":"Type","description":"CoinbasePro"}]},"mfaSchemes":[],"instructionsUrl":"https://help.coinbase.com/en/pro/other-topics/api/how-do-i-create-an-api-key-for-coinbase-pro"}],"status":"ok","message":"","errorType":""}
              }
            }
          }
        }
      }
    },
    "/api/v1/authenticate": {
      "post": {
        "tags": [
          "Self Managed Account Authentication"
        ],
        "summary": "Authenticate user's account",
        "description": "Authenticate user's brokerage/exchange account programmatically (not using the Web Catalog UI)",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "Id of the end-user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Authentication request.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/B2BBrokerAuthRequest"
                  }
                ]
              },
              "example": {"username":"username","password":"password","mfaCode":"000000","mfaType":"phone","type":"robinhood"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerAuthResponseIApiResult"
                },
                "example": {"content":{"status":"succeeded","expiresInSeconds":7200,"accountTokens":[{"account":{"frontAccountId":"00000000-0000-0000-0000-000000000000","accountId":"Id of the account","accountName":"Name of the account"},"accessToken":"Access token, allowing access to the integration","refreshToken":"Optional refresh token, allowing to refresh the access token"}]},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          },
          "503": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/v1/authenticate/{brokerType}": {
      "get": {
        "tags": [
          "Self Managed Account Authentication"
        ],
        "summary": "Get OAuth authentication link",
        "description": "Get OAuth link for the integrations with `OAuth` AuthenticationSchemeType",
        "parameters": [
          {
            "name": "brokerType",
            "in": "path",
            "description": "Type of the integration to connect",
            "required": true,
            "schema": {
              "enum": [
                "robinhood",
                "eTrade",
                "alpaca",
                "tdAmeritrade",
                "weBull",
                "stash",
                "interactiveBrokers",
                "public",
                "coinbase",
                "kraken",
                "coinbasePro",
                "cryptoCom",
                "openSea",
                "binanceUs",
                "gemini",
                "cryptocurrencyAddress",
                "cryptocurrencyWallet",
                "okCoin",
                "bittrex",
                "kuCoin",
                "etoro",
                "cexIo",
                "binanceInternational",
                "bitstamp",
                "gateIo",
                "acorns",
                "okx",
                "bitFlyer",
                "coinlist",
                "huobi",
                "bitfinex",
                "deFiWallet",
                "krakenDirect",
                "vanguard",
                "binanceInternationalDirect",
                "bitfinexDirect",
                "bybit"
              ],
              "allOf": [
                {
                  "$ref": "#/components/schemas/BrokerType"
                }
              ]
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Id of the end-user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerAuthPromptResponseIApiResult"
                },
                "example": {"content":{"status":"redirect","redirectLink":"https://front.org/","linkToken":"Link to the integration's site"},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations": {
      "get": {
        "tags": [
          "Managed Account Authentication"
        ],
        "summary": "Retrieve the list of all available integrations.",
        "description": "Returns a list of integrations with details including the integration ID, name, type, \r\nDeFi wallet provider ID, and categories.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationsResponseIApiResult"
                },
                "example": {"content":{"items":[{"id":"7508cb3d-0f41-4996-b74c-b89df3c13e74","name":"CoinbasePro","type":"coinbasePro"},{"id":"681e95bf-71ad-4634-a56a-335d2f9be5c0","name":"CoinCircle","type":"deFiWallet","deFiWalletProviderId":"36d8d9c0c7fe2957149ce8e878f3a01...","categories":["deFiWallet"]}]},"status":"ok","message":"","errorType":""}
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/managed/networks": {
      "get": {
        "tags": [
          "Managed Transfers"
        ],
        "summary": "Get networks",
        "description": "**Get the list of all networks supported by the Front API to perform transfers.**\r\n<br />\r\n---\r\nReturns the list of all networks supported by the Front API and corresponding supported tokens.\r\nThe IDs of networks should be used to configure and initiate transfers.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkModelResponseIApiResult"
                },
                "example": {"content":{"networks":[{"supportedBrokerTypes":["deFiWallet","robinhood","coinbase","kraken","binanceInternational","binanceUs"],"id":"e3c7fdd8-b1fc-4e51-85ae-bb276e075611","name":"Ethereum","chainId":"1","supportedTokens":["ETH","USDC","USDT"]}]},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/managed/integrations": {
      "get": {
        "tags": [
          "Managed Transfers"
        ],
        "summary": "Get integrations",
        "description": "**Get the list of all integrations supported by the Front API to perform managed transfers.**\r\n<br />\r\n---\r\nReturns the list of all integrations currently supported by the Front API and corresponding supported tokens and networks.\r\nThe IDs of networks should be used to configure and initiate transfers.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationNetworkResponseIApiResult"
                },
                "example": {"content":{"integrations":[{"type":"robinhood","networks":[{"id":"e3c7fdd8-b1fc-4e51-85ae-bb276e075611","name":"Ethereum","chainId":"1","supportedTokens":["USDC","ETH"]},{"id":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","name":"Polygon","chainId":"137","supportedTokens":["MATIC","ETH"]}],"supportsOutgoingTransfers":true,"supportsIncomingTransfers":true}]},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/managed/configure": {
      "post": {
        "tags": [
          "Managed Transfers"
        ],
        "summary": "Configure transfer",
        "description": "**Get the list of networks and tokens eligible for a transfer, based on the provided request data.**\r\n<br />\r\n---\r\nTransfers can be configured either from one connected account to another connected account, or\r\nfrom a connected account to any arbitrary address or addresses.\r\n<br />\r\n* **From one connected account to another connected account:**\r\n<br />\r\nThe API client provides `FromAuthToken` that is representing the source account and `ToAuthToken` that is representing the target account. Front API maps networks and tokens supported by both accounts and returns all tokens and networks eligible for a transfer as the result.\r\n<br />\r\n* **From a connected account to any arbitrary address:**\r\n<br />\r\nThe API client provides `FromAuthToken` that is representing the source account and the list of target addresses using the `ToAddresses` field. Front API verifies the addresses and returns the list of tokens, eligible to be transferred as the result of the operation.\r\n<br /><br />\r\nReturns the list of holdings on the account that can be used to perform the transfer. Each holdings item\r\ncontains the list of supported networks that can be used to transfer the corresponding asset.\r\nEach network contains details such as gas fees and the amount eligible to be transferred.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConfigureTransferRequest"
                  }
                ]
              },
              "examples": {
                "Configure with provided list of addresses": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","toAddresses":[{"networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"USDT","address":"0x9Bf6207f8A3f4278E0C989527015deFe10e5D7c6"},{"networkId":"0291810a-5947-424d-9a59-e88bb33e999d","symbol":"USDT","address":"HN7cABqLq46Es1jh92dQQisAq662SmxELLLsHHe4YWrH"},{"networkId":"0880db06-7c7c-4738-898f-cf74efc03c47","symbol":"BTC","address":"3FZbgi29cpjq2GjdwV8eyHuJJnkLtktZc5"}]}
                },
                "Configure transfer between two connected accounts": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","toAuthToken":"Secret authentication token","toType":"coinbase"}
                },
                "Configure with provided list of addresses, symbol and amount": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","toAddresses":[{"networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"USDT","address":"0x9Bf6207f8A3f4278E0C989527015deFe10e5D7c6"},{"networkId":"0291810a-5947-424d-9a59-e88bb33e999d","symbol":"USDT","address":"HN7cABqLq46Es1jh92dQQisAq662SmxELLLsHHe4YWrH"},{"networkId":"0880db06-7c7c-4738-898f-cf74efc03c47","symbol":"BTC","address":"3FZbgi29cpjq2GjdwV8eyHuJJnkLtktZc5"}],"symbol":"USDT","amount":130,"fiatCurrency":"USD"}
                },
                "Configure transfer between two connected accounts, symbol, amount in fiat and preferred network": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","toAuthToken":"Secret authentication token","toType":"coinbase","symbol":"USDT","amountInFiat":130,"fiatCurrency":"USD","networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12"}
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConfigureTransferRequest"
                  }
                ]
              },
              "examples": {
                "Configure with provided list of addresses": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","toAddresses":[{"networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"USDT","address":"0x9Bf6207f8A3f4278E0C989527015deFe10e5D7c6"},{"networkId":"0291810a-5947-424d-9a59-e88bb33e999d","symbol":"USDT","address":"HN7cABqLq46Es1jh92dQQisAq662SmxELLLsHHe4YWrH"},{"networkId":"0880db06-7c7c-4738-898f-cf74efc03c47","symbol":"BTC","address":"3FZbgi29cpjq2GjdwV8eyHuJJnkLtktZc5"}]}
                },
                "Configure transfer between two connected accounts": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","toAuthToken":"Secret authentication token","toType":"coinbase"}
                },
                "Configure with provided list of addresses, symbol and amount": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","toAddresses":[{"networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"USDT","address":"0x9Bf6207f8A3f4278E0C989527015deFe10e5D7c6"},{"networkId":"0291810a-5947-424d-9a59-e88bb33e999d","symbol":"USDT","address":"HN7cABqLq46Es1jh92dQQisAq662SmxELLLsHHe4YWrH"},{"networkId":"0880db06-7c7c-4738-898f-cf74efc03c47","symbol":"BTC","address":"3FZbgi29cpjq2GjdwV8eyHuJJnkLtktZc5"}],"symbol":"USDT","amount":130,"fiatCurrency":"USD"}
                },
                "Configure transfer between two connected accounts, symbol, amount in fiat and preferred network": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","toAuthToken":"Secret authentication token","toType":"coinbase","symbol":"USDT","amountInFiat":130,"fiatCurrency":"USD","networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConfigureTransferRequest"
                  }
                ]
              },
              "examples": {
                "Configure with provided list of addresses": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","toAddresses":[{"networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"USDT","address":"0x9Bf6207f8A3f4278E0C989527015deFe10e5D7c6"},{"networkId":"0291810a-5947-424d-9a59-e88bb33e999d","symbol":"USDT","address":"HN7cABqLq46Es1jh92dQQisAq662SmxELLLsHHe4YWrH"},{"networkId":"0880db06-7c7c-4738-898f-cf74efc03c47","symbol":"BTC","address":"3FZbgi29cpjq2GjdwV8eyHuJJnkLtktZc5"}]}
                },
                "Configure transfer between two connected accounts": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","toAuthToken":"Secret authentication token","toType":"coinbase"}
                },
                "Configure with provided list of addresses, symbol and amount": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","toAddresses":[{"networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"USDT","address":"0x9Bf6207f8A3f4278E0C989527015deFe10e5D7c6"},{"networkId":"0291810a-5947-424d-9a59-e88bb33e999d","symbol":"USDT","address":"HN7cABqLq46Es1jh92dQQisAq662SmxELLLsHHe4YWrH"},{"networkId":"0880db06-7c7c-4738-898f-cf74efc03c47","symbol":"BTC","address":"3FZbgi29cpjq2GjdwV8eyHuJJnkLtktZc5"}],"symbol":"USDT","amount":130,"fiatCurrency":"USD"}
                },
                "Configure transfer between two connected accounts, symbol, amount in fiat and preferred network": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","toAuthToken":"Secret authentication token","toType":"coinbase","symbol":"USDT","amountInFiat":130,"fiatCurrency":"USD","networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigureTransferResponseIApiResult"
                },
                "examples": {
                  "Successful transfer configuration": {
                    "value": {"content":{"status":"succeeded","holdings":[{"symbol":"USDC","availableBalance":130,"availableBalanceInFiat":0,"eligibleForTransfer":true,"networks":[{"name":"Ethereum","id":"e3c7fdd8-b1fc-4e51-85ae-bb276e075611","minimumAmount":1,"totalEstimatedTransferFeeInFiat":1.8,"estimatedNetworkGasFee":{"fee":0.000850608941007,"feeCurrency":"ETH","feeInFiat":1.8},"institutionTransferFee":{"fee":0,"feeCurrency":"ETH","feeInFiat":0},"eligibleForTransfer":true},{"name":"Solana","id":"0291810a-5947-424d-9a59-e88bb33e999d","minimumAmount":1,"totalEstimatedTransferFeeInFiat":0.1,"estimatedNetworkGasFee":{"fee":0.00025,"feeCurrency":"SOL","feeInFiat":0.1},"institutionTransferFee":{"fee":0,"feeCurrency":"SOL","feeInFiat":0},"eligibleForTransfer":true}]}]},"status":"ok","message":"","errorType":""}
                  },
                  "Transfer configuration with failed validation": {
                    "value": {"status":"badRequest","message":"Either `ToAddresses` or `ToAuthToken` should be provided.","errorType":"invalidField"}
                  },
                  "Transfer configuration with no eligible tokens to transfer": {
                    "value": {"content":{"status":"succeeded","holdings":[{"symbol":"USDC","availableBalance":1,"availableBalanceInFiat":0,"eligibleForTransfer":false},{"symbol":"ETH","availableBalance":0.00001,"availableBalanceInFiat":0,"eligibleForTransfer":false}]},"status":"ok","message":"","errorType":""}
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"badRequest","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/managed/preview": {
      "post": {
        "tags": [
          "Managed Transfers"
        ],
        "summary": "Preview transfer",
        "description": "**Validate and preview the transfer.**\r\n<br />\r\n---\r\nValidates the transfer, calculates the relevant amount in crypto if requested amount was in fiat and updates\r\nthe current network fee values.\r\n<br />\r\nThis endpoint uses the `NetworkId` field to specify which network will be used to perform the transfer. The target `NetworkId`\r\nshould be selected after configuring the transfer using `/configure` endpoint.\r\n<br /><br />\r\nReturns the `PreviewId` value that can be used to commit the transfer.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PreviewTransferRequest"
                  }
                ]
              },
              "examples": {
                "Preview with provided address": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"USDT","toAddress":"0x9Bf6207f8A3f4278E0C989527015deFe10e5D7c6","amount":10}
                },
                "Preview transfer between two connected accounts": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","toAuthToken":"Secret authentication token","toType":"coinbase","networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"USDT","toAddress":"0x9Bf6207f8A3f4278E0C989527015deFe10e5D7c6","amount":10}
                },
                "Preview transfer between two connected accounts, using fiat amount": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","toAuthToken":"Secret authentication token","toType":"coinbase","networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"USDT","toAddress":"0x9Bf6207f8A3f4278E0C989527015deFe10e5D7c6","amountInFiat":10}
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PreviewTransferRequest"
                  }
                ]
              },
              "examples": {
                "Preview with provided address": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"USDT","toAddress":"0x9Bf6207f8A3f4278E0C989527015deFe10e5D7c6","amount":10}
                },
                "Preview transfer between two connected accounts": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","toAuthToken":"Secret authentication token","toType":"coinbase","networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"USDT","toAddress":"0x9Bf6207f8A3f4278E0C989527015deFe10e5D7c6","amount":10}
                },
                "Preview transfer between two connected accounts, using fiat amount": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","toAuthToken":"Secret authentication token","toType":"coinbase","networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"USDT","toAddress":"0x9Bf6207f8A3f4278E0C989527015deFe10e5D7c6","amountInFiat":10}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PreviewTransferRequest"
                  }
                ]
              },
              "examples": {
                "Preview with provided address": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"USDT","toAddress":"0x9Bf6207f8A3f4278E0C989527015deFe10e5D7c6","amount":10}
                },
                "Preview transfer between two connected accounts": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","toAuthToken":"Secret authentication token","toType":"coinbase","networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"USDT","toAddress":"0x9Bf6207f8A3f4278E0C989527015deFe10e5D7c6","amount":10}
                },
                "Preview transfer between two connected accounts, using fiat amount": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","toAuthToken":"Secret authentication token","toType":"coinbase","networkId":"7436e9d0-ba42-4d2b-b4c0-8e4e606b2c12","symbol":"USDT","toAddress":"0x9Bf6207f8A3f4278E0C989527015deFe10e5D7c6","amountInFiat":10}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviewTransferResponseIApiResult"
                },
                "examples": {
                  "Successful transfer preview": {
                    "value": {"content":{"status":"succeeded","previewResult":{"previewId":"29b185b1-2305-40fb-a0e2-929d61451568","previewExpiresIn":300,"fromAddress":"0x9Bf6207f8A3f4278E0C989527015deFe10e5D7c6","toAddress":"0x326a8825472bb0f4719998e708a1eeeb4473ed1b","symbol":"USDT","amount":10,"amountInFiat":10,"totalEstimatedAmountInFiat":11.1,"networkId":"e3c7fdd8-b1fc-4e51-85ae-bb276e075611","institutionTransferFee":{"fee":0,"feeCurrency":"USDT","feeInFiat":0},"estimatedNetworkGasFee":{"fee":1.1,"feeCurrency":"USDT","feeInFiat":1.1}}},"status":"ok","message":"","errorType":""}
                  },
                  "Failed transfer preview": {
                    "value": {"status":"badRequest","message":"The\u00A0specified amount is greater than the maximum amount allowed.","displayMessage":"The\u00A0specified amount is greater than the maximum amount allowed.","errorType":"invalidField"}
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"badRequest","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/managed/execute": {
      "post": {
        "tags": [
          "Managed Transfers"
        ],
        "summary": "Execute transfer",
        "description": "**Commit the previously previewed transfer.**\r\n<br />\r\n---\r\nPreviews the transfer, using the `PreviewId` value.\r\n<br />\r\nHandles multi-factor authentication codes if the account is configured to use them for additional security.\r\n<br /><br />\r\nReturns the status of the transfer and the details of the transfer if it was initiated successfully.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExecuteTransferRequest"
                  }
                ]
              },
              "examples": {
                "Execute transfer": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","previewId":"29b185b1-2305-40fb-a0e2-929d61451568"}
                },
                "Execute transfer providing the MFA code": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","previewId":"29b185b1-2305-40fb-a0e2-929d61451568","mfaCode":"112457"}
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExecuteTransferRequest"
                  }
                ]
              },
              "examples": {
                "Execute transfer": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","previewId":"29b185b1-2305-40fb-a0e2-929d61451568"}
                },
                "Execute transfer providing the MFA code": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","previewId":"29b185b1-2305-40fb-a0e2-929d61451568","mfaCode":"112457"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExecuteTransferRequest"
                  }
                ]
              },
              "examples": {
                "Execute transfer": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","previewId":"29b185b1-2305-40fb-a0e2-929d61451568"}
                },
                "Execute transfer providing the MFA code": {
                  "value": {"fromAuthToken":"Secret authentication token","fromType":"robinhood","previewId":"29b185b1-2305-40fb-a0e2-929d61451568","mfaCode":"112457"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteTransferResponseIApiResult"
                },
                "examples": {
                  "Successful transfer preview": {
                    "value": {"content":{"status":"succeeded","executeTransferResult":{"transferId":"e332336c-de22-11ed-b5ea-0242ac120002","status":"pending","statusDetails":"In progress","fromAddress":"0x9Bf6207f8A3f4278E0C989527015deFe10e5D7c6","toAddress":"0x326a8825472bb0f4719998e708a1eeeb4473ed1b","symbol":"USDT","networkName":"Ethereum","networkId":"e3c7fdd8-b1fc-4e51-85ae-bb276e075611","hash":"0xdcfd72635a9b16d3bc0e75311f6fe0612970e9714a1e9e93de0ea5acffc6a454","amount":10,"amountInFiat":10,"totalAmountInFiat":11.1,"completedConfirmations":1,"institutionTransferFee":{"fee":0,"feeCurrency":"USDT","feeInFiat":0},"networkGasFee":{"fee":1.1,"feeCurrency":"USDT","feeInFiat":1.1}}},"status":"ok","message":"","errorType":""}
                  },
                  "Transfer preview when MFA is required": {
                    "value": {"content":{"status":"mfaRequired"},"status":"ok","message":"","errorType":""}
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"badRequest","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/holdings/get": {
      "post": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get holdings.",
        "description": "Obtain assets from the connected investment account. Performs realtime API call to the underlying integration.",
        "requestBody": {
          "description": "Request containing authentication token",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PortfolioBrokerBaseRequest"
                  }
                ]
              },
              "example": {"authToken":"Secret authentication token","type":"robinhood"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Holdings obtained",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerPortfolioModelIApiResult"
                },
                "example": {"content":{"status":"succeeded","equityPositions":[{"symbol":"AAPL","amount":3,"costBasis":109},{"symbol":"F","amount":27,"costBasis":7.05791}],"notSupportedEquityPositions":[{"symbol":"CUSIP38259P508","amount":1}],"notSupportedCryptocurrencyPositions":[],"cryptocurrencyPositions":[{"symbol":"DOGE","amount":1503,"costBasis":0.033},{"symbol":"BTC","amount":3.00016720,"costBasis":18000}],"nftPositions":[],"optionPositions":[],"type":"robinhood","accountId":"5FUVPB0","institutionName":"Robinhood","accountName":"Margin account"},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"badRequest","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/holdings/value": {
      "post": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get holdings values.",
        "description": "Obtain assets from the connected investment account and return total value and performance.\r\nPerforms realtime API call to the underlying integration.",
        "requestBody": {
          "description": "Request with authentication token.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PortfolioBrokerBaseRequest"
                  }
                ]
              },
              "example": {"authToken":"Secret authentication token","type":"robinhood"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Market values of assets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerPortfolioValueModelIApiResult"
                },
                "example": {"content":{"totalValue":186.03,"totalPerformance":6.23,"equitiesValue":100.12,"equitiesPerformance":5.3457,"cryptocurrenciesValue":50.37,"cryptocurrenciesPerformance":7.23,"nftsValue":15.34,"fiatValue":20.2},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"badRequest","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/holdings/portfolio": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get aggregated portfolio",
        "description": "Get the aggregated portfolio of the user containing market values.",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "description": "End user ID to get the aggregated portfolio for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TimezoneOffset",
            "in": "query",
            "description": "Offset in second, used to calculate daily return for cryptocurrencies.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Portfolio obtained",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BPortfolioModelIApiResult"
                },
                "example": {"content":{"portfolioCostBasis":1793.71,"actualPortfolioPerformance":6.9,"equitiesValue":1918.03,"cryptocurrenciesValue":1164.44,"nftsValue":0,"equityPositions":[{"marketValue":13.69,"portfolioPercentage":0.44,"totalReturn":-1.30,"returnPercentage":-8.67,"lastPrice":214.44,"companyName":"Tesla","totalDailyReturn":0.45,"dailyReturnPercentage":3.45,"symbol":"TSLA","amount":0.063,"costBasis":234.80},{"marketValue":1201.67,"portfolioPercentage":38.98,"totalReturn":144.97,"returnPercentage":13.71,"lastPrice":147.27,"companyName":"Apple","totalDailyReturn":31.65,"dailyReturnPercentage":2.70,"symbol":"AAPL","amount":8.15,"costBasis":129.50}],"cryptocurrencyPositions":[{"marketValue":351.4570,"portfolioPercentage":11.4018,"totalReturn":-592.6533,"returnPercentage":-62.7737,"lastPrice":1350.07,"companyName":"Ethereum","totalDailyReturn":-3.6081,"dailyReturnPercentage":-1.0162,"symbol":"ETH","amount":0.260325000,"costBasis":3626.660},{"marketValue":240.5754,"portfolioPercentage":7.80,"totalReturn":-85.45,"returnPercentage":-26.20,"lastPrice":0.05977,"companyName":"Dogecoin","totalDailyReturn":-2.45,"dailyReturnPercentage":-1.0103,"symbol":"DOGE","amount":4025.02,"costBasis":0.081}],"nftPositions":[]},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"ok","message":"","errorType":""}
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/transactions/list": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get transactions",
        "description": "Get transactions on the account - the paginated history of the executed orders along with the pending orders.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransactionsB2BBrokerOrderListRequest"
                  }
                ]
              },
              "example": {"count":20,"statuses":["success"],"authToken":"Secret authentication token","type":"robinhood"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transactions obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerOrderListResponseIApiResult"
                },
                "example": {"content":{"transactions":[{"id":"17EC1243-D91A-48B6-B0CE-ECFDB134F8A0","side":"buy","symbol":"AAPL","name":"APPLE INC","assetType":"option","paymentSymbol":"USD","paymentType":"fiat","amount":1,"price":120,"value":120,"createdTimestamp":1653215676,"updatedTimestamp":1653215697,"status":"success","orderType":"market","timeInForce":"goodForDay","brokerType":"robinhood","transactionType":"order","optionDetails":{"optionType":"call","direction":"buyToOpen","strikePrice":200,"expirationTimestamp":1673215697,"numberOfSharesInContract":100,"complexOrderStrategyType":"NONE"}},{"id":"F9E932AE-A780-42F3-B887-82D888D594E5","side":"sell","symbol":"AAPL","name":"APPLE INC","assetType":"equity","paymentSymbol":"USD","paymentType":"fiat","amount":2,"price":130,"value":260,"createdTimestamp":1651739676,"updatedTimestamp":1651739781,"status":"success","orderType":"market","timeInForce":"goodTillCanceled","brokerType":"robinhood","transactionType":"order"},{"id":"9B5827E4-7D08-4A71-B4C0-B1B4E5562592","side":"buy","symbol":"BTC","name":"Bitcoin","assetType":"cryptocurrency","paymentSymbol":"ETH","paymentType":"cryptocurrency","amount":0.3,"price":18604.8197,"value":5581.44591,"createdTimestamp":1651739676,"updatedTimestamp":1651739781,"status":"success","orderType":"limit","timeInForce":"goodTillCanceled","brokerType":"robinhood","transactionType":"order"}],"cursor":"N2VkZDI0MDMtNmRhYy01NThhLTk5NDUDYzI12M3GQ3ZmQ2","total":3,"earliestTimestamp":1651739676},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or provided integration token is not correct.",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/transactions/details": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get transaction details",
        "description": "Get details of an executed order. Typically used to poll the status of the previously executed order.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransactionsB2BBrokerOrderRequest"
                  }
                ]
              },
              "example": {"id":"17EC1243-D91A-48B6-B0CE-ECFDB134F8A0","isCryptocurrency":true,"authToken":"Secret authentication token","type":"robinhood"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transactions obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerOrderIApiResult"
                },
                "example": {"id":"17EC1243-D91A-48B6-B0CE-ECFDB134F8A0","side":"buy","symbol":"AAPL","assetType":"equity","paymentType":"fiat","amount":1,"price":120,"value":120,"createdTimestamp":1653215676,"updatedTimestamp":1653215697,"status":"success","statusDetails":"","brokerType":"robinhood","transactionType":"order"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or provided integration token is not correct.",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Transaction is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transactions/featureList": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get supported order features for institution",
        "description": "Get supported features for trading for a particular financial institution. Different institutions support different\r\nfeatures (e.g. different `OrderType` or different sets of `TimeInForce` values), so this endpoint is used to\r\ndescribe such features for provided financial institution.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransactionsBrokerBaseRequest"
                  }
                ]
              },
              "example": {"authToken":"Secret authentication token","type":"robinhood"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Feature list obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerTradingFeatureInfoIApiResult"
                },
                "example": {"content":{"brokerType":"robinhood","accountId":"5K9N3VO1","cryptocurrencyOrders":{"supported":true,"supportsFiatCurrencyPayment":true,"supportsCryptocurrencyPayment":false,"supportsMarginOrders":true,"supportedCryptocurrencySymbols":["BTC","ETH","SOL","DOGE"],"supportedFiatCurrencies":["USD"],"marketType":{"supported":true,"supportsFractionalShares":true,"supportsExtendedMarketHours":true,"supportsPlacingBuyOrdersInFiatAmount":false,"supportsPlacingSellOrdersInFiatAmount":false,"supportedTimeInForceList":["fillOrKill","goodForDay","goodTillCanceled","immediateOrCancel"],"supportsPlacingBuyOrdersInPaymentSymbolAmount":false,"supportsPlacingSellOrdersInPaymentSymbolAmount":false,"supportsPlacingBuyOrdersInBaseSymbolAmount":true,"supportsPlacingSellOrdersInBaseSymbolAmount":true},"limitType":{"supported":true,"supportsFractionalShares":true,"supportsExtendedMarketHours":true,"supportsPlacingBuyOrdersInFiatAmount":false,"supportsPlacingSellOrdersInFiatAmount":false,"supportedTimeInForceList":["goodForDay","goodTillCanceled","immediateOrCancel"],"supportsPlacingBuyOrdersInPaymentSymbolAmount":false,"supportsPlacingSellOrdersInPaymentSymbolAmount":false,"supportsPlacingBuyOrdersInBaseSymbolAmount":true,"supportsPlacingSellOrdersInBaseSymbolAmount":true},"stopLossType":{"supported":true,"supportsFractionalShares":true,"supportsExtendedMarketHours":true,"supportsPlacingBuyOrdersInFiatAmount":false,"supportsPlacingSellOrdersInFiatAmount":false,"supportedTimeInForceList":["fillOrKill","goodForDay","goodTillCanceled","immediateOrCancel"],"supportsPlacingBuyOrdersInPaymentSymbolAmount":false,"supportsPlacingSellOrdersInPaymentSymbolAmount":false,"supportsPlacingBuyOrdersInBaseSymbolAmount":true,"supportsPlacingSellOrdersInBaseSymbolAmount":true}},"stockOrders":{"supported":true,"supportsFiatCurrencyPayment":true,"supportsCryptocurrencyPayment":false,"supportsMarginOrders":true,"supportedFiatCurrencies":["USD"],"marketType":{"supported":true,"supportsFractionalShares":true,"supportsExtendedMarketHours":true,"supportsPlacingBuyOrdersInFiatAmount":false,"supportsPlacingSellOrdersInFiatAmount":false,"supportedTimeInForceList":["fillOrKill","goodForDay","goodTillCanceled","immediateOrCancel"],"supportsPlacingBuyOrdersInPaymentSymbolAmount":false,"supportsPlacingSellOrdersInPaymentSymbolAmount":false,"supportsPlacingBuyOrdersInBaseSymbolAmount":false,"supportsPlacingSellOrdersInBaseSymbolAmount":false},"limitType":{"supported":true,"supportsFractionalShares":true,"supportsExtendedMarketHours":true,"supportsPlacingBuyOrdersInFiatAmount":false,"supportsPlacingSellOrdersInFiatAmount":false,"supportedTimeInForceList":["goodForDay","goodTillCanceled","immediateOrCancel"],"supportsPlacingBuyOrdersInPaymentSymbolAmount":false,"supportsPlacingSellOrdersInPaymentSymbolAmount":false,"supportsPlacingBuyOrdersInBaseSymbolAmount":false,"supportsPlacingSellOrdersInBaseSymbolAmount":false},"stopLossType":{"supported":true,"supportsFractionalShares":true,"supportsExtendedMarketHours":true,"supportsPlacingBuyOrdersInFiatAmount":false,"supportsPlacingSellOrdersInFiatAmount":false,"supportedTimeInForceList":["fillOrKill","goodForDay","goodTillCanceled","immediateOrCancel"],"supportsPlacingBuyOrdersInPaymentSymbolAmount":false,"supportsPlacingSellOrdersInPaymentSymbolAmount":false,"supportsPlacingBuyOrdersInBaseSymbolAmount":false,"supportsPlacingSellOrdersInBaseSymbolAmount":false}},"status":"succeeded","supportsOrderPreview":true,"supportsPriceQuotes":false,"supportsOrderCancellation":true,"isIntegrationUp":true,"isTradingSupported":true,"fiatBalances":[{"cash":1355,"buyingPower":1355,"cryptocurrencyBuyingPower":1355,"currencyCode":"USD"}]},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or provided integration token is not correct.",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/transactions/preview/{side}": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Preview order execution",
        "description": "Validates the order information (such as necessary balance availability), and returns additional information,\r\nsuch as expected order fee.\r\nDoes not execute the order.",
        "parameters": [
          {
            "name": "side",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "unknown",
                "buy",
                "sell"
              ],
              "allOf": [
                {
                  "$ref": "#/components/schemas/BrokerOrderType"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransactionsB2BBrokerCreateOrderRequest"
                  }
                ]
              },
              "examples": {
                "Cryptocurrency Limit example": {
                  "value": {"symbol":"ETH","paymentSymbol":"USD","amount":1,"price":1200,"isCryptocurrency":true,"paymentIsCryptocurrency":false,"amountIsFiat":false,"amountIsInPaymentSymbol":false,"extendedHours":false,"orderType":"limit","timeInForce":"goodForDay","authToken":"Secret authentication token","type":"robinhood"}
                },
                "Stock Market example": {
                  "value": {"symbol":"AAPL","paymentSymbol":"USD","amount":1,"price":0,"isCryptocurrency":false,"paymentIsCryptocurrency":false,"amountIsFiat":false,"amountIsInPaymentSymbol":false,"extendedHours":false,"orderType":"market","timeInForce":"goodTillCanceled","authToken":"Secret authentication token","type":"robinhood"}
                },
                "Stock Payment/Quote amount example ('buy TSLA for $10')": {
                  "value": {"symbol":"TSLA","paymentSymbol":"USD","amount":0,"price":0,"isCryptocurrency":false,"paymentIsCryptocurrency":false,"amountIsFiat":true,"amountInFiat":10,"amountIsInPaymentSymbol":true,"amountInPaymentSymbol":10,"extendedHours":false,"orderType":"market","timeInForce":"goodTillCanceled","authToken":"Secret authentication token","type":"robinhood"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order preview obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerPreviewOrderResultIApiResult"
                },
                "example": {"content":{"brokerType":"robinhood","fee":1.99,"feeText":"","amount":1,"side":"buy","status":"success","paymentSymbol":"USD","paymentIsCryptocurrency":false,"estimatedUnitPrice":1200},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "400": {
            "description": "Request details are not correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or provided integration token is not correct.",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/transactions/{side}": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Execute order",
        "description": "Validates the order information and then calls institution's API to execute an order.\r\nIt's recommended to call this endpoint after calling the `preview` endpoint to make sure that the\r\norder execution request is correct.",
        "parameters": [
          {
            "name": "side",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "unknown",
                "buy",
                "sell"
              ],
              "allOf": [
                {
                  "$ref": "#/components/schemas/BrokerOrderType"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransactionsB2BBrokerCreateOrderRequest"
                  }
                ]
              },
              "examples": {
                "Cryptocurrency Limit example": {
                  "value": {"symbol":"ETH","paymentSymbol":"USD","amount":1,"price":1200,"isCryptocurrency":true,"paymentIsCryptocurrency":false,"amountIsFiat":false,"amountIsInPaymentSymbol":false,"extendedHours":false,"orderType":"limit","timeInForce":"goodForDay","authToken":"Secret authentication token","type":"robinhood"}
                },
                "Stock Market example": {
                  "value": {"symbol":"AAPL","paymentSymbol":"USD","amount":1,"price":0,"isCryptocurrency":false,"paymentIsCryptocurrency":false,"amountIsFiat":false,"amountIsInPaymentSymbol":false,"extendedHours":false,"orderType":"market","timeInForce":"goodTillCanceled","authToken":"Secret authentication token","type":"robinhood"}
                },
                "Stock Payment/Quote amount example ('buy TSLA for $10')": {
                  "value": {"symbol":"TSLA","paymentSymbol":"USD","amount":0,"price":0,"isCryptocurrency":false,"paymentIsCryptocurrency":false,"amountIsFiat":true,"amountInFiat":10,"amountIsInPaymentSymbol":true,"amountInPaymentSymbol":10,"extendedHours":false,"orderType":"market","timeInForce":"goodTillCanceled","authToken":"Secret authentication token","type":"robinhood"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order executed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerCreateOrderResultIApiResult"
                },
                "example": {"content":{"orderId":"6713DCDC-3D2E-46BC-ACB6-CF5FDE431CE2","brokerType":"robinhood","side":"buy","amount":1,"price":1200,"value":1200,"fee":1.99,"timestamp":1661904014,"status":"success","statusDetails":"Executed successfully","timeInForce":"goodTillCanceled"},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "400": {
            "description": "Request details are not correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or provided integration token is not correct.",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/transactions/cancel": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Cancel order execution",
        "description": "Cancels a pending order (an order with `InProgress` status).\r\n`SymbolPair` is required to be provided for `Binance`, `BinanceInternational`, `Okx` and `BitFlyer` institutions.\r\nThis value",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransactionsB2BBrokerOrderRequest"
                  }
                ]
              },
              "example": {"id":"17EC1243-D91A-48B6-B0CE-ECFDB134F8A0","isCryptocurrency":true,"authToken":"Secret authentication token","type":"robinhood"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order canceled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IApiResult"
                }
              }
            }
          },
          "400": {
            "description": "Request details are not correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or provided integration token is not correct.",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transactions/symbolinfo": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get symbol information",
        "description": "Returns information on trading allowance for a provided symbol.\r\nFor example - some institutions allow fractional trading for some symbols, but do not allow it\r\nfor others. So before placing an order the API client can check if the required symbol can be traded fractionally\r\nwith the provided institution.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransactionsB2BBrokerSymbolInfoForOrderRequest"
                  }
                ]
              },
              "example": {"side":"buy","symbol":"BTC","amount":0,"price":0,"isCryptocurrency":false,"paymentIsCryptocurrency":false,"amountIsFiat":false,"amountIsInPaymentSymbol":false,"extendedHours":false,"orderType":"market","timeInForce":"goodTillCanceled","type":"robinhood"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Information for symbol obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerOrderSymbolInfoIApiResult"
                },
                "example": {"content":{"fractionalTradingAllowance":"fractionalTradingAllowed","minimumOrderValue":0.001,"precisionScale":6},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "400": {
            "description": "Request details are not correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct.",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/list": {
      "post": {
        "tags": [
          "Transfers"
        ],
        "summary": "List transfers",
        "description": "Get cryptocurrency transfers, such as transfers on a cryptocurrency wallet, or\r\ndeposit/withdrawal transfers on an cryptocurrency exchange account.",
        "requestBody": {
          "description": "Authentication token and integration type to obtain the list of transfers.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransfersBrokerTransactionsListRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transfers obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerTransactionsListModelIApiResult"
                },
                "example": {"content":{"transfers":[{"id":"8E25ACB5-A9E2-4D00-8772-A255F010A2A9","status":"succeeded","type":"deposit","fromAddress":"D5PumQwt...","targetAddress":"D641Fmzx...","symbol":"DOGE","hash":"3310c6202aaeb44754a118ce11f255382d012060ade0d6d9f...","amount":15,"transactionAmount":10,"createdTimestamp":1653215600,"updatedTimestamp":1653215600,"networkTransactionFee":{"amount":5,"symbol":"DOGE"},"confirmations":17,"blockchainMethod":"transfer"},{"id":"70E6E3CF-5ACF-49C5-A4E1-5FB85A567F26","status":"succeeded","type":"withdrawal","fromAddress":"0x7BDE8361Fe587daD0e35448E754...","targetAddress":"0x83C8F28c26bF6aaca652Df1DbBE...","symbol":"ETH","hash":"0x77f3a280aa5cfe956a5759c24cf774325504070b32b4159...","amount":0.1,"transactionAmount":0.099,"createdTimestamp":1653211113,"updatedTimestamp":1653211113,"networkTransactionFee":{"amount":0.001,"symbol":"ETH"},"confirmations":18,"blockchainMethod":"transfer"}],"total":2,"cursor":"N2VkZDI0MDMtNmRhYy01NThhLTk5NDUDYzI12M3GQ3ZmQ2","earliestTimestamp":1653211113},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"badRequest","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/mesh": {
      "get": {
        "tags": [
          "Transfers"
        ],
        "summary": "Get transfers executed by Mesh Connect",
        "description": "Get cryptocurrency transfers, such as transfers on a cryptocurrency wallet, or\r\ndeposit/withdrawal transfers on an cryptocurrency exchange account executed via Mesh Connect.",
        "parameters": [
          {
            "name": "Count",
            "in": "query",
            "description": "Number of items to return. Default 10, maximum - 100.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "Number of items to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Id",
            "in": "query",
            "description": "Mesh transfer identifier.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ClientTransactionId",
            "in": "query",
            "description": "Client transaction identifier.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "Client's user identifier.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IntegrationIds",
            "in": "query",
            "description": "Transfered integration.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "Statuses",
            "in": "query",
            "description": "Transfer statuses.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TranferStatus"
              }
            }
          },
          {
            "name": "FromTimestamp",
            "in": "query",
            "description": "Transfer created minimum timestamp.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "ToTimestamp",
            "in": "query",
            "description": "Transfer created maximum timestamp.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "MinAmountInFiat",
            "in": "query",
            "description": "Minimum amount in fiat.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "MaxAmountInFiat",
            "in": "query",
            "description": "Maximum amount in fiat.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "Order by column.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TranferOrderByFields"
                }
              ]
            }
          },
          {
            "name": "DescendingOrder",
            "in": "query",
            "description": "Value indicating if ordering is descending.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transfers obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferModelPaginationResponseApiResult"
                },
                "example": {"content":{"items":[{"id":"8e25acb5-a9e2-4d00-8772-a255f010a2a9","clientTransactionId":"123456","userId":"123456798","status":"succeeded","amountInFiat":1000.3,"amountInFiatCurrencyCode":"USD","amount":10.123,"symbol":"ETH","networkName":"Polygon","createdTimestamp":1653211113,"from":{"id":"8e25acb5-a9e2-4d00-8772-a255f010a2a9","type":"robinhood","name":"Robinhood"},"hash":"0x77f3a280aa5cfe956a5759c24cf774325504070b32b4159..."},{"id":"12345678-a9e2-4d00-8772-a255f010a2a9","clientTransactionId":"123456","userId":"123456798","status":"failed","amountInFiat":10.3,"amountInFiatCurrencyCode":"USD","amount":0.123,"symbol":"ETH","networkName":"Polygon","createdTimestamp":1653211113,"from":{"id":"8e25acb5-a9e2-4d00-8772-a255f010a2a9","type":"deFiWallet","name":"MetaMask"},"hash":"0x77f3a280aa5cfe956a5759c24cf774325504070b32b4159..."}],"total":10},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"badRequest","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/details": {
      "post": {
        "tags": [
          "Transfers"
        ],
        "summary": "Get transfer",
        "description": "Get details of a cryptocurrency transfer.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransfersBrokerCryptocurrencyTransactionDetailsRequest"
                  }
                ]
              },
              "example": {"transactionId":"63F1A6B6-BF45-4E51-A624-EC52B5680D48","authToken":"Secret authentication token","type":"robinhood"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transfer details obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerCryptocurrencyTransactionIApiResult"
                },
                "example": {"content":{"id":"8E25ACB5-A9E2-4D00-8772-A255F010A2A9","status":"succeeded","type":"deposit","fromAddress":"D5PumQwt...","targetAddress":"D641Fmzx...","symbol":"DOGE","hash":"3310c6202aaeb44754a118ce11f255382d012060ade0d6d9f...","amount":15,"transactionAmount":10,"createdTimestamp":1653215600,"updatedTimestamp":1653215600,"networkTransactionFee":{"amount":5,"symbol":"DOGE"},"confirmations":17,"blockchainMethod":"transfer"},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "400": {
            "description": "Transfer details are not correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"badRequest","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Transfer with provided id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"notFound","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers": {
      "post": {
        "tags": [
          "Transfers"
        ],
        "summary": "Initiate a transfer",
        "description": "Initiate a new cryptocurrency transfer on a blockchain, cryptocurrency broker or cryptocurrency exchange.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransfersBrokerCreateCryptocurrencyTransactionRequest"
                  }
                ]
              },
              "examples": {
                "Transfer using AddressType (DOGE over DOGE chain)": {
                  "value": {"data":"Some memo","targetAddress":"D641Fmzx...","amount":100,"fee":5,"addressType":"dogeAddress","mfaCode":"000000","password":"$sb7u26","authToken":"Secret authentication token","type":"coinbase"}
                },
                "Transfer using symbol and chain (USDT as ERC-20 over Ethereum chain)": {
                  "value": {"data":"Some memo","targetAddress":"0x4Df61A3CcfB...","amount":100,"fee":0,"mfaCode":"000000","chain":"ETH","symbol":"USDT","authToken":"Secret authentication token","type":"coinbase"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transfer successfully initiated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerCreateCryptocurrencyTransactionResponseIApiResult"
                },
                "example": {"content":{"failed":false,"status":"pending","statusDetails":"Accepted","transaction":{"id":"8E25ACB5-A9E2-4D00-8772-A255F010A2A9","status":"pending","type":"withdrawal","fromAddress":"D5PumQwt...","targetAddress":"D641Fmzx...","symbol":"DOGE","hash":"3310c6202aaeb44754a118ce11f255382d012060ade0d6d9f...","amount":105,"transactionAmount":100,"createdTimestamp":1653215600,"updatedTimestamp":1653215600,"networkTransactionFee":{"amount":5,"symbol":"DOGE"},"confirmations":3,"blockchainMethod":"transfer"}},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "400": {
            "description": "Transfer details are not correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"badRequest","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/address/get": {
      "post": {
        "tags": [
          "Transfers"
        ],
        "summary": "Get deposit address",
        "description": "Get or generate a cryptocurrency deposit address that can be used to transfer assets to the financial institution",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransfersBrokerCryptocurrencyDepositAddressRequest"
                  }
                ]
              },
              "example": {"symbol":"DOGE","chain":"DOGE","authToken":"Secret authentication token","type":"robinhood"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Address successfully obtained or generation initiated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerCryptocurrencyDepositAddressResponseIApiResult"
                },
                "example": {"content":{"symbol":"DOGE","address":"D641Fmzx...","chain":"DOGE"},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "400": {
            "description": "Request details are not correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"badRequest","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "404": {
            "description": "Address for the required symbol is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"notFound","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/symbol/details": {
      "post": {
        "tags": [
          "Transfers"
        ],
        "summary": "Get details of asset",
        "description": "Get details of the asset for deposit or withdrawal. For example, several exchanges support same tokens over multiple\r\nblockchains, and thus require the name of chain to be supplied for transfers. This endpoint allows getting such details.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransfersBrokerCryptocurrencyDepositAddressRequest"
                  }
                ]
              },
              "example": {"symbol":"DOGE","chain":"DOGE","authToken":"Secret authentication token","type":"robinhood"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Address successfully obtained or generation initiated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerCryptocurrencySymbolDetailsResponseIApiResult"
                },
                "example": {"content":{"symbol":"ETH","addressTypes":["ethAddress"],"chains":[{"chain":"Ethereum","fee":0.00001}]},"status":"ok","message":"","errorType":""}
              }
            }
          },
          "400": {
            "description": "Request details are not correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"badRequest","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "404": {
            "description": "Asset details for provided symbol are not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {"status":"notFound","message":"Error message","displayMessage":"Optional display message","errorType":"missingField"}
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiResult": {
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "description": "A message generated by the API",
            "nullable": true
          },
          "displayMessage": {
            "type": "string",
            "description": "User-friendly display message that can be presented to the end user",
            "nullable": true
          },
          "errorType": {
            "type": "string",
            "description": "Strictly-typed error type that is explaining the reason of an unsuccessful status of the operation.\r\nAll possible error types are available in the documentation.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApiResultStatus": {
        "enum": [
          "ok",
          "serverFailure",
          "permissionDenied",
          "badRequest",
          "notFound",
          "conflict",
          "tooManyRequest",
          "locked"
        ],
        "type": "string"
      },
      "Asset": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "enum": [
              "equity",
              "cryptocurrency"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/AssetType"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AssetPaginationResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Asset"
            },
            "description": "list of items",
            "nullable": true
          },
          "total": {
            "type": "integer",
            "description": "Total number of items",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AssetPaginationResponseIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssetPaginationResponse"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "AssetType": {
        "enum": [
          "equity",
          "cryptocurrency"
        ],
        "type": "string"
      },
      "AuthFlowStep": {
        "enum": [
          "loginPassword",
          "mfaFlow"
        ],
        "type": "string"
      },
      "AuthenticationFieldDescription": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the field, as expected from the API",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationModel": {
        "type": "object",
        "properties": {
          "authResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerAuthResponse"
              }
            ],
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthenticationFieldDescription"
            },
            "description": "Set of fields that are expected to be provided based on the status of the AuthResponse",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationSchemeType": {
        "enum": [
          "usernamePassword",
          "oAuth",
          "apiKey",
          "blockchainAddress"
        ],
        "type": "string"
      },
      "B2BAssetType": {
        "enum": [
          "equity",
          "cryptocurrency",
          "option",
          "nft"
        ],
        "type": "string"
      },
      "B2BBrokerAccountBalance": {
        "type": "object",
        "properties": {
          "cash": {
            "type": "number",
            "description": "Withdrawable cash amount on the account.",
            "format": "double",
            "nullable": true
          },
          "buyingPower": {
            "type": "number",
            "description": "Buying power indicating the maximum amount the user can spend to buy assets. E.g. available margin.",
            "format": "double",
            "nullable": true
          },
          "cryptocurrencyBuyingPower": {
            "type": "number",
            "description": "Buying power available for placing cryptocurrency orders.",
            "format": "double",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "ISO 4217 currency code.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerAccountBalanceModel": {
        "type": "object",
        "properties": {
          "balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BBrokerAccountBalance"
            },
            "nullable": true
          },
          "totalCashUsdValue": {
            "type": "number",
            "description": "Total USD value of all currencies",
            "format": "double",
            "nullable": true
          },
          "totalBuyingPowerUsdValue": {
            "type": "number",
            "description": "Total USD value of all Buying Power",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerAccountBalanceModelIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerAccountBalanceModel"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerAuthPromptResponse": {
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "failed",
              "redirect",
              "openInBrokerModule"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerAuthPromptStatus"
              }
            ]
          },
          "redirectLink": {
            "type": "string",
            "nullable": true
          },
          "linkToken": {
            "type": "string",
            "nullable": true
          },
          "oAuthToken": {
            "type": "string",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerAuthPromptResponseIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerAuthPromptResponse"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerAuthRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ]
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "tradePin": {
            "type": "string",
            "nullable": true
          },
          "countryInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryInfo"
              }
            ],
            "nullable": true
          },
          "challengeId": {
            "type": "string",
            "nullable": true
          },
          "challengeCode": {
            "type": "string",
            "nullable": true
          },
          "challengeAnswer": {
            "type": "string",
            "description": "Used to provide answers to security questions",
            "nullable": true
          },
          "mfaCode": {
            "type": "string",
            "nullable": true
          },
          "mfaType": {
            "enum": [
              "phone",
              "email",
              "totp",
              "phoneAndEmail",
              "requireNextSecurityQuestion",
              "readEmail"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/MfaType"
              }
            ]
          },
          "deviceInfo": {
            "type": "string",
            "nullable": true
          },
          "authFlowStep": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthFlowStep"
              }
            ],
            "nullable": true
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "authToken": {
            "type": "string",
            "nullable": true
          },
          "redirectLink": {
            "type": "string",
            "nullable": true
          },
          "confirmationEmail": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerAuthResponse": {
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "failed",
              "challengeFailed",
              "succeeded",
              "challengeIssued",
              "mfaRequired",
              "openInBrokerModule",
              "delayed",
              "deviceConfirmationRequired",
              "emailVerification",
              "emailReceived",
              "captchaChallenge"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerAuthStatus"
              }
            ],
            "description": "Status of the request"
          },
          "mfaType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MfaType"
              }
            ],
            "nullable": true
          },
          "authFlowStep": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthFlowStep"
              }
            ],
            "description": "The AuthFlowStep is used to determine which state the authentication is in, for initial requests without MFA verification the value should be LoginPassword and when calling with MFA code it should be MfaFlow (currently used for BinanceInternationalDirect only).",
            "nullable": true
          },
          "challengeId": {
            "type": "string",
            "description": "Id of the challenge, relevant when the status is `ChallengeIssued`",
            "nullable": true
          },
          "challengeText": {
            "type": "string",
            "nullable": true
          },
          "challengeExpiresInSeconds": {
            "type": "integer",
            "description": "Life span of the challenge",
            "format": "int32",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true
          },
          "accessToken": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "refreshToken": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "expiresInSeconds": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "refreshTokenExpiresInSeconds": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerAccount"
              }
            ],
            "nullable": true,
            "deprecated": true
          },
          "brokerBrandInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerBrandInfo"
              }
            ],
            "nullable": true
          },
          "accountTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrokerAccountTokens"
            },
            "nullable": true
          },
          "requiresReauthentication": {
            "type": "boolean",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerAuthResponseIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerAuthResponse"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerAuthStatus": {
        "enum": [
          "failed",
          "succeeded",
          "mfaRequired"
        ],
        "type": "string"
      },
      "B2BBrokerCreateCryptocurrencyTransactionResponse": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "Transaction Id by the financial institution",
            "nullable": true
          },
          "failed": {
            "type": "boolean"
          },
          "mfaType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MfaType"
              }
            ],
            "nullable": true
          },
          "status": {
            "enum": [
              "unknown",
              "failed",
              "frozen",
              "succeeded",
              "mfaRequired",
              "pending",
              "expired",
              "canceled",
              "waitingForSignature",
              "waitingForClearing",
              "awaitingApproval",
              "awaitingConfirmation",
              "awaitingVerification",
              "rejected",
              "pendingCancel",
              "emailVerification",
              "deviceConfirmationRequired",
              "mfaFailed",
              "addressWhitelistRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerCryptocurrencyTransactionStatus"
              }
            ],
            "description": "Status of the operation"
          },
          "statusDetails": {
            "type": "string",
            "description": "Details of the current status of the transfer, as provided by the financial institution",
            "nullable": true
          },
          "transaction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerCryptocurrencyTransaction"
              }
            ],
            "description": "Details of the created transaction",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerCreateCryptocurrencyTransactionResponseIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerCreateCryptocurrencyTransactionResponse"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerCreateOrderRequest": {
        "required": [
          "amount",
          "amountIsInPaymentSymbol",
          "authToken",
          "isCryptocurrency",
          "orderType",
          "paymentIsCryptocurrency",
          "paymentSymbol",
          "symbol",
          "timeInForce",
          "type"
        ],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect"
          },
          "symbol": {
            "minLength": 1,
            "type": "string",
            "description": "Symbol to trade. For example, `AAPL` or `ETH`"
          },
          "paymentSymbol": {
            "minLength": 1,
            "type": "string",
            "description": "Symbol to use for payment, defaults to `USD`."
          },
          "amount": {
            "type": "number",
            "description": "Amount of purchase.",
            "format": "double"
          },
          "price": {
            "type": "number",
            "description": "Price of the unit, used for `Limit` and `StopLoss` orders.",
            "format": "double"
          },
          "isCryptocurrency": {
            "type": "boolean",
            "description": "Some Stock and Crypto symbols can intersect, so the type of the asset needs to be specified explicitly."
          },
          "paymentIsCryptocurrency": {
            "type": "boolean",
            "description": "Indicates whether the `PaymentSymbol` is fiat or cryptocurrency"
          },
          "amountIsFiat": {
            "type": "boolean",
            "nullable": true,
            "deprecated": true
          },
          "amountInFiat": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "deprecated": true
          },
          "amountIsInPaymentSymbol": {
            "type": "boolean",
            "description": "This value indicates if the order should be executed in payment/quote currency amount (e.g. purchase ETH for $10). This can be\r\nperformed only if the current institution supports such orders (`SupportsPlacingSellOrdersInPaymentSymbolAmount` and\r\n`SupportsPlacingBuyOrdersInPaymentSymbolAmount` fields in `get supported order features for institution`) and `AmountInPaymentSymbol`\r\nvalue is passed."
          },
          "amountInPaymentSymbol": {
            "type": "number",
            "description": "Specifies the target amount in the payment/quote currency. For example, setting this to `10` when the `AmountInPaymentSymbol` = `true`\r\nand `PaymentSymbol` = `USD` will instruct the API to place an order to buy/sell the asset worth $10.",
            "format": "double",
            "nullable": true
          },
          "extendedHours": {
            "type": "boolean",
            "description": "Specifies if the extended trading hours should be used."
          },
          "orderType": {
            "enum": [
              "market",
              "limit",
              "stopLoss"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderPlaceTypeTrade"
              }
            ]
          },
          "timeInForce": {
            "enum": [
              "goodTillCanceled",
              "immediateOrCancel",
              "fillOrKill",
              "goodForDay",
              "postOnly",
              "unknown"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderTimeInForceType"
              }
            ]
          },
          "mfaCode": {
            "type": "string",
            "description": "MFA Code to create an order (requested by Kraken if MFA is enabled in user settings)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerCreateOrderResult": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Id of the order, as returned from the financial institution. Can be used to get the status of the order.",
            "nullable": true
          },
          "brokerType": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution."
          },
          "side": {
            "enum": [
              "unknown",
              "buy",
              "sell"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderType"
              }
            ],
            "description": "Side of the order."
          },
          "amount": {
            "type": "number",
            "description": "Amount of the order.",
            "format": "double"
          },
          "price": {
            "type": "number",
            "description": "Unit price of the asset.",
            "format": "double",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "Total value of the order.",
            "format": "double",
            "nullable": true
          },
          "fee": {
            "type": "number",
            "description": "Optional Fee taken by the financial institution.",
            "format": "double",
            "nullable": true
          },
          "timestamp": {
            "type": "integer",
            "description": "Timestamp of the order.",
            "format": "int64"
          },
          "status": {
            "enum": [
              "unknown",
              "inProgress",
              "cancelled",
              "rejected",
              "failed",
              "success",
              "partiallyFilled",
              "expired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderStatus"
              }
            ],
            "description": "Status of the order."
          },
          "statusDetails": {
            "type": "string",
            "description": "Text details of the order, if additionally returned from the financial institution.",
            "nullable": true
          },
          "timeInForce": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderTimeInForceType"
              }
            ],
            "description": "Value that indicates how long the order will remain active before it is executed or expires.",
            "nullable": true
          },
          "symbolPair": {
            "type": "string",
            "description": "Optional pair of symbols, as returned from the financial institution. Can be required to obtain the status of the order by some institutions.",
            "nullable": true
          },
          "parentOrderId": {
            "type": "string",
            "description": "Id of the parent order, applicable to some institutions if the order was executed in several trades.",
            "nullable": true
          },
          "trades": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BBrokerOrderTrade"
            },
            "description": "List of trades, provided only if the order was executed in several trades.",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "description": "A message describing the error if the order wasn't placed.",
            "nullable": true
          },
          "displayMessage": {
            "type": "string",
            "description": "A user-friendly display message that can be presented to the end user.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerCreateOrderResultIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerCreateOrderResult"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerCryptocurrencyDepositAddressResponse": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "chain": {
            "type": "string",
            "nullable": true
          },
          "memo": {
            "type": "string",
            "nullable": true
          },
          "minimumDepositAmount": {
            "type": "string",
            "nullable": true
          },
          "networkId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "brokerResponseStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerResponseStatus"
              }
            ],
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerCryptocurrencyDepositAddressResponseIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerCryptocurrencyDepositAddressResponse"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerCryptocurrencySymbolDetailsResponse": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Requested symbol",
            "nullable": true
          },
          "addressTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CryptocurrencyAddressType"
            },
            "description": "Supported address types",
            "nullable": true
          },
          "chains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrokerCryptocurrencyChain"
            },
            "description": "Supported chains. One of the values should be provided to execute transfers",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerCryptocurrencySymbolDetailsResponseIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerCryptocurrencySymbolDetailsResponse"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerCryptocurrencyTransaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the transfer, if provided by the financial institution",
            "nullable": true
          },
          "status": {
            "enum": [
              "unknown",
              "failed",
              "frozen",
              "succeeded",
              "mfaRequired",
              "pending",
              "expired",
              "canceled",
              "waitingForSignature",
              "waitingForClearing",
              "awaitingApproval",
              "awaitingConfirmation",
              "awaitingVerification",
              "rejected",
              "pendingCancel",
              "emailVerification",
              "deviceConfirmationRequired",
              "mfaFailed",
              "addressWhitelistRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerCryptocurrencyTransactionStatus"
              }
            ],
            "description": "Current status of the transaction"
          },
          "statusDetails": {
            "type": "string",
            "description": "Details of the current status of the transfer, as provided by the financial institution",
            "nullable": true
          },
          "type": {
            "enum": [
              "unknown",
              "deposit",
              "withdrawal"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerCryptocurrencyTransactionType"
              }
            ],
            "description": "The direction of the transaction"
          },
          "fromAddress": {
            "type": "string",
            "description": "Address where the transaction was sent from",
            "nullable": true
          },
          "targetAddress": {
            "type": "string",
            "description": "Address where the transaction was sent to",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "description": "Ticker of the transaction",
            "nullable": true
          },
          "chain": {
            "type": "string",
            "description": "Crypto Chain the transaction belongs to",
            "nullable": true
          },
          "memo": {
            "type": "string",
            "description": "Memo of the transaction (also called \"Tag\")",
            "nullable": true
          },
          "hash": {
            "type": "string",
            "description": "Hash of the transaction",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Full amount affected the balance, typically transaction amount plus fee",
            "format": "double"
          },
          "transactionAmount": {
            "type": "number",
            "description": "Transaction amount",
            "format": "double",
            "nullable": true
          },
          "createdTimestamp": {
            "type": "integer",
            "description": "Unix timestamp in seconds indicating when the transaction was created",
            "format": "int64"
          },
          "updatedTimestamp": {
            "type": "integer",
            "description": "Unix timestamp in seconds indicating when the transaction was last updated",
            "format": "int64"
          },
          "networkTransactionFee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerCryptocurrencyTransactionNetworkFee"
              }
            ],
            "description": "Fee taken by the network",
            "nullable": true
          },
          "transferFee": {
            "type": "number",
            "description": "Fee taken by the financial institution",
            "format": "double",
            "nullable": true
          },
          "confirmations": {
            "type": "integer",
            "description": "Number of confirmations on the blockchain",
            "format": "int64",
            "nullable": true
          },
          "blockchainMethodName": {
            "type": "string",
            "description": "Name of the executed blockchain function based on decoded input data",
            "nullable": true
          },
          "blockchainMethod": {
            "enum": [
              "transfer",
              "swap",
              "mint",
              "withdraw",
              "claimRewards",
              "deposit",
              "approve",
              "forgeToken",
              "multicall",
              "migrateToken",
              "claim",
              "openSeaTransfer",
              "cancel",
              "commit",
              "run",
              "repay",
              "execute",
              "stake",
              "merge"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerCryptocurrencyTransactionBlockchainMethod"
              }
            ],
            "description": "Executed blockchain function based on decoded input data. Not guaranteed to be identified"
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerCryptocurrencyTransactionIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerCryptocurrencyTransaction"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerOptionData": {
        "type": "object",
        "properties": {
          "optionType": {
            "enum": [
              "unknown",
              "call",
              "put"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOptionType"
              }
            ],
            "description": "Type of option"
          },
          "direction": {
            "enum": [
              "unknown",
              "buyToOpen",
              "buyToClose",
              "sellToOpen",
              "sellToClose",
              "buyToCover",
              "sellShort"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOptionDirection"
              }
            ],
            "description": "Direction of option"
          },
          "strikePrice": {
            "type": "number",
            "description": "Option strike price",
            "format": "double"
          },
          "expirationTimestamp": {
            "type": "integer",
            "description": "Option expiration timestamp",
            "format": "int64"
          },
          "numberOfSharesInContract": {
            "type": "number",
            "description": "Number of shares covered by option",
            "format": "double"
          },
          "complexOrderStrategyType": {
            "type": "string",
            "description": "Option complex order strategy type",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerOrder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Transaction id, as provided by the institution",
            "nullable": true
          },
          "side": {
            "enum": [
              "unknown",
              "buy",
              "sell"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderType"
              }
            ],
            "description": "Side of the transaction"
          },
          "symbol": {
            "type": "string",
            "description": "Traded symbol",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the traded asset",
            "nullable": true
          },
          "assetType": {
            "enum": [
              "equity",
              "cryptocurrency",
              "option",
              "nft"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BAssetType"
              }
            ],
            "description": "Type of the traded asset"
          },
          "paymentSymbol": {
            "type": "string",
            "description": "Fiat or cryptocurrency symbol used for payment. For transactions with types `ConversionFrom` or `ConversionTo`\r\nthis field specifies the target symbol. For example, for `ETH` to `BTC` conversion, the transaction type is `ConversionTo`, the `Symbol` field is `ETH` and the `PaymentSymbol` is `BTC`",
            "nullable": true
          },
          "paymentType": {
            "enum": [
              "fiat",
              "cryptocurrency"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerOrderPaymentSymbolType"
              }
            ],
            "description": "Indicates if the payment was performed with fiat or crypto currency"
          },
          "amount": {
            "type": "number",
            "description": "Executed amount",
            "format": "double",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "Price of the unit",
            "format": "double",
            "nullable": true
          },
          "fee": {
            "type": "number",
            "description": "Order Fee, taken by the financial institution",
            "format": "double",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "Total value",
            "format": "double",
            "nullable": true
          },
          "createdTimestamp": {
            "type": "integer",
            "description": "Unix timestamp in seconds indicating when the order was placed or the transaction was created",
            "format": "int64"
          },
          "updatedTimestamp": {
            "type": "integer",
            "description": "Unix timestamp in seconds indicating when the transaction was last updated (e.g. executed)",
            "format": "int64"
          },
          "status": {
            "enum": [
              "unknown",
              "inProgress",
              "cancelled",
              "rejected",
              "failed",
              "success",
              "partiallyFilled",
              "expired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderStatus"
              }
            ],
            "description": "Status of the transaction"
          },
          "statusDetails": {
            "type": "string",
            "description": "Status text, as provided by the institution",
            "nullable": true
          },
          "orderType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderPlaceType"
              }
            ],
            "description": "Type of the placed order",
            "nullable": true
          },
          "timeInForce": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderTimeInForceType"
              }
            ],
            "description": "Time in force of the order: a value indicating how long the order remains active before it is executed or expires",
            "nullable": true
          },
          "brokerType": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the integration"
          },
          "transactionType": {
            "enum": [
              "order",
              "conversionTo",
              "conversionFrom",
              "ownAccountDeposit",
              "ownAccountWithdraw",
              "stake",
              "dividendReinvestment",
              "interest",
              "reward",
              "unknown",
              "conversionToFiat",
              "conversionFromFiat"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BTransactionType"
              }
            ],
            "description": "Type of the transaction"
          },
          "parentOrderId": {
            "type": "string",
            "description": "Id of the parent order, applicable to some institutions",
            "nullable": true
          },
          "optionDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerOptionData"
              }
            ],
            "description": "Additional details for options",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerOrderIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerOrder"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerOrderListRequest": {
        "required": [
          "authToken",
          "type"
        ],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect"
          },
          "cursor": {
            "type": "string",
            "description": "The cursor to retrieve the next page of transactions.\r\nProviding it will cause the response to only return changes after this update.\r\nIf this field is not provided, the history of transactions will be returned starting with the first-added transaction.",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "description": "Number of records to include in the response. <br />\r\nDefault: `100` <br />\r\nMaximum: `250`",
            "format": "int32"
          },
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrokerOrderStatus"
            },
            "description": "Return orders of this statuses only. If this field is not provided, orders with all available statuses will be returned.",
            "nullable": true
          },
          "from": {
            "type": "integer",
            "description": "Return orders created after this timestamp.\r\nIf this field is not provided, orders will be returned according to the default of the institution.",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerOrderListResponse": {
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BBrokerOrder"
            },
            "description": "List of obtained transactions.",
            "nullable": true
          },
          "cursor": {
            "type": "string",
            "description": "The cursor to retrieve the next page of transactions.",
            "nullable": true
          },
          "total": {
            "type": "integer",
            "description": "Total amount of records.",
            "format": "int64"
          },
          "earliestTimestamp": {
            "type": "integer",
            "description": "Earliest transaction timestamp.",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerOrderListResponseIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerOrderListResponse"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerOrderPaymentSymbolType": {
        "enum": [
          "fiat",
          "cryptocurrency"
        ],
        "type": "string"
      },
      "B2BBrokerOrderRequest": {
        "required": [
          "authToken",
          "id",
          "isCryptocurrency",
          "type"
        ],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect"
          },
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "side": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderType"
              }
            ],
            "description": "Should be provided for Coinbase.",
            "nullable": true
          },
          "isCryptocurrency": {
            "type": "boolean",
            "description": "Some Stock and Crypto symbols can intersect, so we need to explicitly specify what type of asset is requested to be bought."
          },
          "symbolPair": {
            "type": "string",
            "description": "Symbol pair of the order (requested by some brokers).",
            "nullable": true
          },
          "mfaCode": {
            "type": "string",
            "description": "MFA Code to cancel an order (requested by Kraken if MFA is enabled in user settings)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerOrderSymbolInfo": {
        "type": "object",
        "properties": {
          "fractionalTradingAllowance": {
            "enum": [
              "fractionalTradingAllowed",
              "fractionalTradingNotAllowed",
              "tradingNotAllowed",
              "fractionalTradingPossiblyAllowed"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/SymbolTradingAllowance"
              }
            ],
            "description": "Specifies if the fractional trading is allowed for the provided symbol"
          },
          "minimumOrderValue": {
            "type": "number",
            "description": "Minimum allowed order value",
            "format": "double"
          },
          "precisionScale": {
            "type": "integer",
            "description": "Maximum number of decimal digits accepted by the symbol",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerOrderSymbolInfoIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerOrderSymbolInfo"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerOrderTrade": {
        "type": "object",
        "properties": {
          "tradeId": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "value": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "fee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "orderCategory": {
            "enum": [
              "order",
              "trade",
              "ledger",
              "historyAction"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderCategory"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerPortfolioModel": {
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "succeeded",
              "failed",
              "notAuthorized"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerRequestStatus"
              }
            ],
            "description": "Status of the request to the institution's API"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message specifying the problem",
            "nullable": true
          },
          "displayMessage": {
            "type": "string",
            "description": "User-friendly error message, optimized to be shown to the end user",
            "nullable": true
          },
          "equityPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BPosition"
            },
            "description": "Equity holdings, such as stocks and ETFs",
            "nullable": true
          },
          "notSupportedEquityPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BPosition"
            },
            "description": "The equity positions Front could not recognize",
            "nullable": true
          },
          "notSupportedCryptocurrencyPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BPosition"
            },
            "description": "The cryptocurrency positions Front could not recognize",
            "nullable": true
          },
          "cryptocurrencyPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BPosition"
            },
            "description": "Cryptocurrency holdings on the account",
            "nullable": true
          },
          "nftPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BNftPosition"
            },
            "description": "NFT holdings on the account",
            "nullable": true
          },
          "optionPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BOptionPosition"
            },
            "description": "Option holdings on the account",
            "nullable": true
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution"
          },
          "accountId": {
            "type": "string",
            "description": "External institution's account id (returned by the institution)",
            "nullable": true
          },
          "institutionName": {
            "type": "string",
            "description": "Friendly name of the connected institution",
            "nullable": true
          },
          "accountName": {
            "type": "string",
            "description": "Name of the account as returned from the institution",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerPortfolioModelIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerPortfolioModel"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerPreviewOrderResult": {
        "type": "object",
        "properties": {
          "brokerType": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ]
          },
          "fee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "feeText": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "side": {
            "enum": [
              "unknown",
              "buy",
              "sell"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderType"
              }
            ]
          },
          "status": {
            "enum": [
              "success",
              "failed"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderValidationStatus"
              }
            ]
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "paymentSymbol": {
            "type": "string",
            "nullable": true
          },
          "paymentIsCryptocurrency": {
            "type": "boolean"
          },
          "estimatedUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerPreviewOrderResultIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerPreviewOrderResult"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerRefreshTokenResponse": {
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "failed",
              "succeeded",
              "mfaRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerAuthStatus"
              }
            ]
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true
          },
          "account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerAccount"
              }
            ],
            "nullable": true,
            "deprecated": true
          },
          "accessToken": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "refreshToken": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "expiresInSeconds": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "refreshTokenExpiresInSeconds": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "brokerAccountTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrokerAccountTokens"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerRefreshTokenResponseIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerRefreshTokenResponse"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerSymbolInfoForOrderRequest": {
        "required": [
          "amount",
          "amountIsInPaymentSymbol",
          "authToken",
          "isCryptocurrency",
          "orderType",
          "paymentIsCryptocurrency",
          "paymentSymbol",
          "symbol",
          "timeInForce",
          "type"
        ],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect"
          },
          "symbol": {
            "minLength": 1,
            "type": "string",
            "description": "Symbol to trade. For example, `AAPL` or `ETH`"
          },
          "paymentSymbol": {
            "minLength": 1,
            "type": "string",
            "description": "Symbol to use for payment, defaults to `USD`."
          },
          "amount": {
            "type": "number",
            "description": "Amount of purchase.",
            "format": "double"
          },
          "price": {
            "type": "number",
            "description": "Price of the unit, used for `Limit` and `StopLoss` orders.",
            "format": "double"
          },
          "isCryptocurrency": {
            "type": "boolean",
            "description": "Some Stock and Crypto symbols can intersect, so the type of the asset needs to be specified explicitly."
          },
          "paymentIsCryptocurrency": {
            "type": "boolean",
            "description": "Indicates whether the `PaymentSymbol` is fiat or cryptocurrency"
          },
          "amountIsFiat": {
            "type": "boolean",
            "nullable": true,
            "deprecated": true
          },
          "amountInFiat": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "deprecated": true
          },
          "amountIsInPaymentSymbol": {
            "type": "boolean",
            "description": "This value indicates if the order should be executed in payment/quote currency amount (e.g. purchase ETH for $10). This can be\r\nperformed only if the current institution supports such orders (`SupportsPlacingSellOrdersInPaymentSymbolAmount` and\r\n`SupportsPlacingBuyOrdersInPaymentSymbolAmount` fields in `get supported order features for institution`) and `AmountInPaymentSymbol`\r\nvalue is passed."
          },
          "amountInPaymentSymbol": {
            "type": "number",
            "description": "Specifies the target amount in the payment/quote currency. For example, setting this to `10` when the `AmountInPaymentSymbol` = `true`\r\nand `PaymentSymbol` = `USD` will instruct the API to place an order to buy/sell the asset worth $10.",
            "format": "double",
            "nullable": true
          },
          "extendedHours": {
            "type": "boolean",
            "description": "Specifies if the extended trading hours should be used."
          },
          "orderType": {
            "enum": [
              "market",
              "limit",
              "stopLoss"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderPlaceTypeTrade"
              }
            ]
          },
          "timeInForce": {
            "enum": [
              "goodTillCanceled",
              "immediateOrCancel",
              "fillOrKill",
              "goodForDay",
              "postOnly",
              "unknown"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderTimeInForceType"
              }
            ]
          },
          "mfaCode": {
            "type": "string",
            "description": "MFA Code to create an order (requested by Kraken if MFA is enabled in user settings)",
            "nullable": true
          },
          "side": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderType"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerTradingFeature": {
        "type": "object",
        "properties": {
          "supported": {
            "type": "boolean"
          },
          "supportsFiatCurrencyPayment": {
            "type": "boolean"
          },
          "supportsCryptocurrencyPayment": {
            "type": "boolean"
          },
          "supportsMarginOrders": {
            "type": "boolean"
          },
          "supportedCryptocurrencySymbols": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "supportedCryptocurrencySymbolsForPayment": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "supportedFiatCurrencies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "marketType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerTradingFeatureOrderType"
              }
            ],
            "nullable": true
          },
          "limitType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerTradingFeatureOrderType"
              }
            ],
            "nullable": true
          },
          "stopLossType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerTradingFeatureOrderType"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerTradingFeatureInfo": {
        "type": "object",
        "properties": {
          "brokerType": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the integration."
          },
          "accountId": {
            "type": "string",
            "description": "Account Id of the integration.",
            "nullable": true
          },
          "cryptocurrencyOrders": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerTradingFeature"
              }
            ],
            "description": "Model, describing the ability to place cryptocurrency orders.",
            "nullable": true
          },
          "stockOrders": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerTradingFeature"
              }
            ],
            "description": "Model, describing the ability to place equity orders.",
            "nullable": true
          },
          "status": {
            "enum": [
              "succeeded",
              "failed",
              "notAuthorized"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerRequestStatus"
              }
            ],
            "description": "Status of the request."
          },
          "supportsOrderPreview": {
            "type": "boolean",
            "description": "Indicates if the preview of orders (`preview order execution` endpoint) is provided by the institution.\r\nThis allows to validate the order using the API of the institution. If the order preview is not supported,\r\nFront API validates the order without calling the institution's API."
          },
          "supportsPriceQuotes": {
            "type": "boolean",
            "description": "Supports getting price information directly from the institution."
          },
          "supportsOrderCancellation": {
            "type": "boolean",
            "description": "Indicates if it is possible to cancel the placed order, while it's in the `InProgress` status."
          },
          "isIntegrationUp": {
            "type": "boolean",
            "description": "Indicates if the integration is available."
          },
          "isTradingSupported": {
            "type": "boolean",
            "description": "Indicates if trading is generally supported at this time."
          },
          "fiatBalances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BBrokerAccountBalance"
            },
            "description": "List of fiat balances of the account.",
            "nullable": true
          },
          "historyRecordLimit": {
            "type": "integer",
            "description": "Limit for history records",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerTradingFeatureInfoIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerTradingFeatureInfo"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerTradingFeatureOrderType": {
        "type": "object",
        "properties": {
          "supported": {
            "type": "boolean",
            "description": "Specifies if this order type is supported for this integration."
          },
          "supportsFractionalShares": {
            "type": "boolean",
            "description": "Specifies if this order type supports buying or selling in fractional amounts. If this value is `false`, then only whole shares can be traded."
          },
          "supportsExtendedMarketHours": {
            "type": "boolean",
            "description": "Indicates if pre-market trading or after-hours trading is supported."
          },
          "supportsPlacingBuyOrdersInFiatAmount": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "supportsPlacingSellOrdersInFiatAmount": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "supportedTimeInForceList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrokerOrderTimeInForceType"
            },
            "description": "The list of supported Time-in-force instructions for this order type.",
            "nullable": true
          },
          "supportsPlacingBuyOrdersInPaymentSymbolAmount": {
            "type": "boolean",
            "description": "Specifies if this order type supports placing buy orders in payment/quote symbol amounts. For example,\r\nif payment/quote symbol is USD, and this capability is supported, then the API can be instructed to buy asset for $10 or other dollar amount."
          },
          "supportsPlacingSellOrdersInPaymentSymbolAmount": {
            "type": "boolean",
            "description": "Specifies if this order type supports placing sell orders in payment/quote symbol amounts. For example,\r\nif payment/quote symbol is USD, and this capability is supported, then the API can be instructed to sell asset for $10 or other dollar amount."
          },
          "supportsPlacingBuyOrdersInBaseSymbolAmount": {
            "type": "boolean",
            "description": "Specifies if this order type supports placing buy orders in base symbol amounts. For example,\r\nif payment/quote symbol is USD, base symbol is AAPL, and this capability is supported, then the API can be instructed to buy 1 or other amount of AAPL."
          },
          "supportsPlacingSellOrdersInBaseSymbolAmount": {
            "type": "boolean",
            "description": "Specifies if this order type supports placing sell orders in base symbol amounts. For example,\r\nif payment/quote symbol is USD, base symbol is AAPL, and this capability is supported, then the API can be instructed to sell 1 or other amount of AAPL."
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerTransactionsListModel": {
        "type": "object",
        "properties": {
          "transfers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BBrokerCryptocurrencyTransaction"
            },
            "description": "List of obtained transfers.",
            "nullable": true
          },
          "total": {
            "type": "integer",
            "description": "Total amount of records.",
            "format": "int64"
          },
          "cursor": {
            "type": "string",
            "description": "The cursor to retrieve the next page of transfers.",
            "nullable": true
          },
          "earliestTimestamp": {
            "type": "integer",
            "description": "Earliest transfer timestamp.",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerTransactionsListModelIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerTransactionsListModel"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokersHealthStatus": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the integration"
          },
          "name": {
            "type": "string",
            "description": "Name of the integration",
            "nullable": true
          },
          "isUp": {
            "type": "boolean",
            "description": "Is the communication with the integration up"
          },
          "description": {
            "type": "string",
            "description": "Description of the outage",
            "nullable": true
          },
          "downTimeStart": {
            "type": "integer",
            "description": "Unix timestamp in seconds indicating when the outage occurred",
            "format": "int64",
            "nullable": true
          },
          "downTimeEnd": {
            "type": "integer",
            "description": "Unix timestamp in seconds indicating expected end of the outage",
            "format": "int64",
            "nullable": true
          },
          "supportedProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrokerFeature"
            },
            "description": "Get products supported by the financial institution",
            "nullable": true
          },
          "deFiWalletData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeFiWalletHealthStatusInfo"
              }
            ],
            "description": "Short information about DeFiWallet",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokersHealthStatusListIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BBrokersHealthStatus"
            },
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BFiatPortfolioModel": {
        "type": "object",
        "properties": {
          "fiatBalances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioFiatBalance"
            },
            "description": "List of aggregated fiat balances",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BFiatPortfolioModelIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BFiatPortfolioModel"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BNftPosition": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "costBasis": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "contractAddress": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "marketplaceId": {
            "type": "integer",
            "format": "int64"
          },
          "tokenId": {
            "type": "string",
            "nullable": true
          },
          "marketplacePermalink": {
            "type": "string",
            "nullable": true
          },
          "addressType": {
            "enum": [
              "ethAddress",
              "btcAddress",
              "ltcAddress",
              "solAddress",
              "algoAddress",
              "celoAddress",
              "cardanoAddress",
              "polygonAddress",
              "bnbAddress",
              "elrondAddress",
              "neoAddress",
              "xrpAddress",
              "flowAddress",
              "harmonyOneAddress",
              "tronAddress",
              "dogeAddress",
              "opAddress"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptocurrencyAddressType"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "B2BOptionPosition": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol of the underlying stock",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Amount of options",
            "format": "double"
          },
          "averageOpenPrice": {
            "type": "number",
            "description": "Total average paid price",
            "format": "double"
          },
          "direction": {
            "enum": [
              "unknown",
              "buyToOpen",
              "buyToClose",
              "sellToOpen",
              "sellToClose",
              "buyToCover",
              "sellShort"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOptionDirection"
              }
            ],
            "description": "Side of the option, buy or sell"
          },
          "createdTimestamp": {
            "type": "integer",
            "format": "int64"
          },
          "updatedTimestamp": {
            "type": "integer",
            "format": "int64"
          },
          "numberOfSharesInContract": {
            "type": "number",
            "description": "Number of shares of the underlying stock",
            "format": "double"
          },
          "optionType": {
            "enum": [
              "unknown",
              "call",
              "put"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOptionType"
              }
            ],
            "description": "Type of the option, put or call"
          },
          "expirationTimestamp": {
            "type": "integer",
            "description": "The last day that the option contract is valid",
            "format": "int64"
          },
          "strikePrice": {
            "type": "number",
            "description": "The price at which a put or call option can be exercised",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "B2BPortfolioModel": {
        "type": "object",
        "properties": {
          "portfolioCostBasis": {
            "type": "number",
            "description": "Amount of money spent to buy all positions of the portfolio.",
            "format": "double",
            "nullable": true
          },
          "actualPortfolioPerformance": {
            "type": "number",
            "description": "Actual performance based on the cost basis.",
            "format": "double",
            "nullable": true
          },
          "equitiesValue": {
            "type": "number",
            "description": "Total USD portfolio value of all equities (sum(equity price * equity amount)). Does not include cash balance.",
            "format": "double"
          },
          "cryptocurrenciesValue": {
            "type": "number",
            "description": "Total USD value of all cryptocurrencies in the portfolio.",
            "format": "double"
          },
          "nftsValue": {
            "type": "number",
            "description": "Total USD value of all NFTs in the portfolio.",
            "format": "double"
          },
          "equityPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BPositionWithMarketValues"
            },
            "description": "List of equity positions",
            "nullable": true
          },
          "cryptocurrencyPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BPositionWithMarketValues"
            },
            "description": "List of cryptocurrency positions",
            "nullable": true
          },
          "nftPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NftPositionWithMarketValues"
            },
            "description": "List of NFT positions",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BPortfolioModelIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BPortfolioModel"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BPosition": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol of the asset",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Amount of the asset",
            "format": "double"
          },
          "costBasis": {
            "type": "number",
            "description": "The total original value (or purchase price) of the asset",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BPositionWithMarketValues": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol of the asset",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Amount of the asset",
            "format": "double"
          },
          "costBasis": {
            "type": "number",
            "description": "The total original value (or purchase price) of the asset",
            "format": "double",
            "nullable": true
          },
          "marketValue": {
            "type": "number",
            "description": "Market value of the asset: amount of asset multiplied by last asset value.",
            "format": "double",
            "nullable": true
          },
          "portfolioPercentage": {
            "type": "number",
            "description": "What percentage of total portfolio value is taken by this asset.",
            "format": "double",
            "nullable": true
          },
          "totalReturn": {
            "type": "number",
            "description": "Total return of investment of this asset. Can be negative or null. Based on the cost basis of the asset, cost basis\r\nis not available by some of integrations.",
            "format": "double",
            "nullable": true
          },
          "returnPercentage": {
            "type": "number",
            "description": "Percent of return of investment for this asset. Can be negative or null.",
            "format": "double",
            "nullable": true
          },
          "lastPrice": {
            "type": "number",
            "description": "Current last price of the asset.",
            "format": "double",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "description": "Company name of the relative asset/",
            "nullable": true
          },
          "totalDailyReturn": {
            "type": "number",
            "description": "Total daily return of investment for this asset. Can be negative.",
            "format": "double",
            "nullable": true
          },
          "dailyReturnPercentage": {
            "type": "number",
            "description": "Daily percent of return of investment for this asset. Can be negative.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BPriceInfo": {
        "type": "object",
        "properties": {
          "price": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "B2BPriceInfoIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BPriceInfo"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BTransactionType": {
        "enum": [
          "order",
          "conversionTo",
          "conversionFrom",
          "ownAccountDeposit",
          "ownAccountWithdraw",
          "stake",
          "dividendReinvestment",
          "interest",
          "reward",
          "unknown",
          "conversionToFiat",
          "conversionFromFiat"
        ],
        "type": "string"
      },
      "BalanceBrokerBaseRequest": {
        "required": [
          "authToken",
          "type"
        ],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect\n\n### Supported integrations:\n```Robinhood```\n```ETrade```\n```Alpaca```\n```TdAmeritrade```\n```WeBull```\n```Stash```\n```InteractiveBrokers```\n```Public```\n```Coinbase```\n```Kraken```\n```CoinbasePro```\n```CryptoCom```\n```Binance```\n```Gemini```\n```OkCoin```\n```Bittrex```\n```KuCoin```\n```Etoro```\n```CexIo```\n```BinanceInternational```\n```Bitstamp```\n```GateIo```\n```Acorns```\n```Okx```\n```BitFlyer```\n```Coinlist```\n```Huobi```\n```Bitfinex```\n```KrakenDirect```\n```Vanguard```\n```BinanceInternationalDirect```\n```BitfinexDirect```\n```Bybit```\n"
          }
        },
        "additionalProperties": false
      },
      "BrokerAccount": {
        "type": "object",
        "properties": {
          "frontAccountId": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "accountName": {
            "type": "string",
            "nullable": true
          },
          "fund": {
            "type": "number",
            "description": "Buying power of the account. Typically consists of cash plus available margin.\r\nFor non-margin accounts fund contains cash only",
            "format": "double",
            "nullable": true
          },
          "cash": {
            "type": "number",
            "description": "Cash balance in USD",
            "format": "double",
            "nullable": true
          },
          "isReconnected": {
            "type": "boolean",
            "description": "Indicates if this account was already connected by the current user and device.\r\nCan be null.",
            "nullable": true
          },
          "balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrokerFiatBalance"
            },
            "description": "The list of all asset balances of account",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerAccountTokens": {
        "type": "object",
        "properties": {
          "account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerAccount"
              }
            ],
            "nullable": true
          },
          "accessToken": {
            "type": "string",
            "nullable": true
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerAuthPromptStatus": {
        "enum": [
          "failed",
          "redirect",
          "openInBrokerModule"
        ],
        "type": "string"
      },
      "BrokerAuthStatus": {
        "enum": [
          "failed",
          "challengeFailed",
          "succeeded",
          "challengeIssued",
          "mfaRequired",
          "openInBrokerModule",
          "delayed",
          "deviceConfirmationRequired",
          "emailVerification",
          "emailReceived",
          "captchaChallenge"
        ],
        "type": "string"
      },
      "BrokerAuthenticationScheme": {
        "type": "object",
        "properties": {
          "brokerType": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ]
          },
          "authenticationSchemeType": {
            "enum": [
              "usernamePassword",
              "oAuth",
              "apiKey",
              "blockchainAddress"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationSchemeType"
              }
            ],
            "description": "Type of authentication for the integration."
          },
          "initialAuthenticationModel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationModel"
              }
            ],
            "description": "Set of fields that should be provided in the initial POST `authenticate` request.",
            "nullable": true
          },
          "authenticationSteps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthenticationModel"
            },
            "description": "Set of fields that should be provided depending on the status of the response of the first POST `authenticate` request.",
            "nullable": true
          },
          "mfaSchemes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MfaScheme"
            },
            "description": "Supported MFA schemes, can be none or multiple.",
            "nullable": true
          },
          "instructionsUrl": {
            "type": "string",
            "description": "Optional URL with the instructions explaining how to create a set of API key/secret for the integration, can be shown to the end user.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerAuthenticationSchemeIReadOnlyCollectionIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrokerAuthenticationScheme"
            },
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "BrokerBaseRequest": {
        "required": [
          "authToken",
          "type"
        ],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect"
          }
        },
        "additionalProperties": false
      },
      "BrokerBrandInfo": {
        "type": "object",
        "properties": {
          "brokerLogo": {
            "type": "string",
            "nullable": true
          },
          "brokerPrimaryColor": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerCreateCryptocurrencyTransactionRequest": {
        "required": [
          "authToken",
          "targetAddress",
          "type"
        ],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect"
          },
          "data": {
            "type": "string",
            "description": "Additional data to send on-chain (optional, depends on an integration)",
            "nullable": true
          },
          "targetAddress": {
            "minLength": 1,
            "type": "string",
            "description": "Target address to transfer the asset to"
          },
          "amount": {
            "type": "number",
            "description": "Amount to transfer",
            "format": "double"
          },
          "fee": {
            "type": "number",
            "description": "On-chain fee (optional, depends on an integration)",
            "format": "double"
          },
          "addressType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptocurrencyAddressType"
              }
            ],
            "description": "Type of the address of symbol to be transferred. Providing `EthAddress` will initiate a transfer of ETH over Ethereum blockchain.\r\nCan be used instead of `Symbol` and `Chain` fields.\r\nTo transfer assets over non-default chains (e.g. sending USDT over ERC20) please `Symbol` and `Chain` fields.",
            "nullable": true
          },
          "mfaCode": {
            "type": "string",
            "description": "2 Factor auth code (optional, depends on an integration)",
            "nullable": true
          },
          "mfaType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MfaType"
              }
            ],
            "description": "2 Factor auth type (optional, depends on an integration)",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "Password or pass-phrase, required to send transfers (optional, depends on an integration)",
            "nullable": true
          },
          "chain": {
            "type": "string",
            "description": "Custom chain name, required by some of the integrations. E.g. USDT can be sent over USDT-ERC20, USDT-TRC20, and USDT-Omni.\r\nCan be used to transfer assets over non-default chains (e.g. sending USDT over ERC20).\r\nPlease use `symbol/details` endpoint to get the list of all possible chains.",
            "nullable": true
          },
          "memo": {
            "type": "string",
            "description": "Memo (also called \"Tag\") - address remark.",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "description": "Symbol to be transferred. Can be provided instead of the `AddressType` field.",
            "nullable": true
          },
          "challengeId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerCryptocurrencyChain": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "description": "Name of the chain, should be provided when initiating a transfer",
            "nullable": true
          },
          "feeDescription": {
            "type": "string",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Notes or tips provided by the integration",
            "nullable": true
          },
          "fee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "networkId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerCryptocurrencyDepositAddressRequest": {
        "required": [
          "authToken",
          "type"
        ],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect"
          },
          "symbol": {
            "type": "string",
            "description": "Symbol of the required cryptocurrency, e.g. ETH or BTC.\r\nCan be used instead of the `AddressType` field.",
            "nullable": true
          },
          "addressType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptocurrencyAddressType"
              }
            ],
            "description": "Type of the address of symbol to be transferred. Providing `EthAddress` will assume a transfer of ETH over Ethereum blockchain.\r\nCan be used instead of `Symbol` field.",
            "nullable": true
          },
          "chain": {
            "type": "string",
            "description": "Chain of the required cryptocurrency, e.g. USDT has USDT-ERC20, USDT-TRC20, and USDT-Omni",
            "nullable": true
          },
          "mfaCode": {
            "type": "string",
            "description": "Some of integrations require MFA code to create a deposit address, e.g. KrakenDirect",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerCryptocurrencyTransactionBlockchainMethod": {
        "enum": [
          "transfer",
          "swap",
          "mint",
          "withdraw",
          "claimRewards",
          "deposit",
          "approve",
          "forgeToken",
          "multicall",
          "migrateToken",
          "claim",
          "openSeaTransfer",
          "cancel",
          "commit",
          "run",
          "repay",
          "execute",
          "stake",
          "merge"
        ],
        "type": "string"
      },
      "BrokerCryptocurrencyTransactionDetailsRequest": {
        "required": [
          "authToken",
          "type"
        ],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect"
          },
          "addressType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptocurrencyAddressType"
              }
            ],
            "description": "Type of the address of the transferred asset. Can be used instead of the `Symbol` field.",
            "nullable": true
          },
          "transactionId": {
            "type": "string",
            "description": "Transaction Id by the financial institution",
            "nullable": true
          },
          "transactionHash": {
            "type": "string",
            "description": "Hash of the transaction on the blockchain",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "description": "Symbol of the transferred asset. Can be provided instead of the `AddressType` field.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerCryptocurrencyTransactionNetworkFee": {
        "type": "object",
        "properties": {
          "gasPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "gasUsed": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerCryptocurrencyTransactionStatus": {
        "enum": [
          "unknown",
          "failed",
          "frozen",
          "succeeded",
          "mfaRequired",
          "pending",
          "expired",
          "canceled",
          "waitingForSignature",
          "waitingForClearing",
          "awaitingApproval",
          "awaitingConfirmation",
          "awaitingVerification",
          "rejected",
          "pendingCancel",
          "emailVerification",
          "deviceConfirmationRequired",
          "mfaFailed",
          "addressWhitelistRequired"
        ],
        "type": "string"
      },
      "BrokerCryptocurrencyTransactionType": {
        "enum": [
          "unknown",
          "deposit",
          "withdrawal"
        ],
        "type": "string"
      },
      "BrokerFeature": {
        "enum": [
          "holdings",
          "balance",
          "orders",
          "transfers",
          "identity",
          "cryptocurrencyDepositAddresses",
          "accountNumber"
        ],
        "type": "string"
      },
      "BrokerFiatBalance": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Account balance currency",
            "nullable": true
          },
          "buyingPower": {
            "type": "number",
            "description": "BuyingPower indicates total amount of money the user can spend for buying stock. Always includes cash and\r\ncan also include margin",
            "format": "double",
            "nullable": true
          },
          "cryptoBuyingPower": {
            "type": "number",
            "description": "BuyingPower indicates total amount of money the user can spend for buying crypto.",
            "format": "double",
            "nullable": true
          },
          "cash": {
            "type": "number",
            "description": "Account cash indicates total amount of money",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerOptionDirection": {
        "enum": [
          "unknown",
          "buyToOpen",
          "buyToClose",
          "sellToOpen",
          "sellToClose",
          "buyToCover",
          "sellShort"
        ],
        "type": "string"
      },
      "BrokerOptionType": {
        "enum": [
          "unknown",
          "call",
          "put"
        ],
        "type": "string"
      },
      "BrokerOrderCategory": {
        "enum": [
          "order",
          "trade",
          "ledger",
          "historyAction"
        ],
        "type": "string"
      },
      "BrokerOrderPlaceType": {
        "enum": [
          "unknown",
          "market",
          "limit",
          "stopLoss",
          "stopLimit",
          "takeProfit",
          "netDebit",
          "netCredit",
          "exercise"
        ],
        "type": "string"
      },
      "BrokerOrderPlaceTypeTrade": {
        "enum": [
          "market",
          "limit",
          "stopLoss"
        ],
        "type": "string"
      },
      "BrokerOrderStatus": {
        "enum": [
          "unknown",
          "inProgress",
          "cancelled",
          "rejected",
          "failed",
          "success",
          "partiallyFilled",
          "expired"
        ],
        "type": "string"
      },
      "BrokerOrderTimeInForceType": {
        "enum": [
          "goodTillCanceled",
          "immediateOrCancel",
          "fillOrKill",
          "goodForDay",
          "postOnly",
          "unknown"
        ],
        "type": "string"
      },
      "BrokerOrderType": {
        "enum": [
          "unknown",
          "buy",
          "sell"
        ],
        "type": "string"
      },
      "BrokerOrderValidationStatus": {
        "enum": [
          "success",
          "failed"
        ],
        "type": "string"
      },
      "BrokerPortfolioValueModel": {
        "type": "object",
        "properties": {
          "totalValue": {
            "type": "number",
            "description": "Total USD value of portfolio.",
            "format": "double",
            "readOnly": true
          },
          "totalPerformance": {
            "type": "number",
            "description": "Total performance in percents based on the cost basis.",
            "format": "double"
          },
          "equitiesValue": {
            "type": "number",
            "description": "USD value of all equities in the portfolio.",
            "format": "double"
          },
          "equitiesPerformance": {
            "type": "number",
            "description": "Performance in percents of all equities based on the cost basis.",
            "format": "double"
          },
          "cryptocurrenciesValue": {
            "type": "number",
            "description": "USD value of all cryptocurrencies in the portfolio.",
            "format": "double"
          },
          "cryptocurrenciesPerformance": {
            "type": "number",
            "description": "Performance in percents of all cryptocurrencies in the portfolio based on the cost basis.",
            "format": "double"
          },
          "nftsValue": {
            "type": "number",
            "description": "USD value of all NFTs in the portfolio.",
            "format": "double"
          },
          "fiatValue": {
            "type": "number",
            "description": "USD value of all fiat currencies in the portfolio.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "BrokerPortfolioValueModelIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerPortfolioValueModel"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "BrokerRefreshTokenRequest": {
        "required": [
          "refreshToken",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ]
          },
          "refreshToken": {
            "minLength": 1,
            "type": "string"
          },
          "createNewRefreshToken": {
            "type": "boolean",
            "description": "Optional, used when we the refresh token should be refreshed.\r\nCurrently this flow is supported by TD Ameritrade",
            "nullable": true
          },
          "accessToken": {
            "type": "string",
            "description": "Some institutions may require accessToken to be provided as well.\r\nIt's currently required by WeBull and Vanguard",
            "nullable": true
          },
          "tradeToken": {
            "type": "string",
            "description": "Currently used to update WeBull trade token.",
            "nullable": true
          },
          "mfaCode": {
            "type": "string",
            "description": "Optional, currently used by Vanguard if account has enforced MFA enabled.",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Additional metadata",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerRequestStatus": {
        "enum": [
          "succeeded",
          "failed",
          "notAuthorized"
        ],
        "type": "string"
      },
      "BrokerResponseStatus": {
        "enum": [
          "unknown",
          "mfaRequired",
          "kycRequired"
        ],
        "type": "string"
      },
      "BrokerTransactionsListRequest": {
        "required": [
          "authToken",
          "type"
        ],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect"
          },
          "count": {
            "type": "integer",
            "description": "Number of records to include in the response. <br />\r\nDefault: `100` <br />\r\nMaximum: `250`",
            "format": "int32"
          },
          "cursor": {
            "type": "string",
            "description": "The cursor to retrieve the next page of transactions.\r\nProviding it will cause the response to only return changes after this update.\r\nIf this field is not provided, the history of transactions will be returned starting with the first-added transaction.",
            "nullable": true
          },
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrokerCryptocurrencyTransactionStatus"
            },
            "description": "If this value is provided, result set is filtered to only include transaction with the provided statuses.",
            "nullable": true
          },
          "cryptocurrencyAddressType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptocurrencyAddressType"
              }
            ],
            "description": "For cryptocurrency address the type of address is required.",
            "nullable": true
          },
          "from": {
            "type": "integer",
            "description": "If this value is provided, result set is filtered to only include transactions created after this timestamp",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerType": {
        "enum": [
          "robinhood",
          "eTrade",
          "alpaca",
          "tdAmeritrade",
          "weBull",
          "stash",
          "interactiveBrokers",
          "public",
          "coinbase",
          "kraken",
          "coinbasePro",
          "cryptoCom",
          "openSea",
          "binanceUs",
          "gemini",
          "cryptocurrencyAddress",
          "cryptocurrencyWallet",
          "okCoin",
          "bittrex",
          "kuCoin",
          "etoro",
          "cexIo",
          "binanceInternational",
          "bitstamp",
          "gateIo",
          "acorns",
          "okx",
          "bitFlyer",
          "coinlist",
          "huobi",
          "bitfinex",
          "deFiWallet",
          "krakenDirect",
          "vanguard",
          "binanceInternationalDirect",
          "bitfinexDirect",
          "bybit"
        ],
        "type": "string"
      },
      "CatalogLink": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Url to open Front catalog that should be presented to the end user.",
            "format": "uri",
            "nullable": true
          },
          "iFrameUrl": {
            "type": "string",
            "description": "Url to open Front catalog in iFrame that should be presented to the end user.",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CatalogLinkIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CatalogLink"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ConfigureTransferRequest": {
        "required": [
          "fromAuthToken",
          "fromType"
        ],
        "type": "object",
        "properties": {
          "fromAuthToken": {
            "minLength": 1,
            "type": "string",
            "description": "The authentication token to send assets from."
          },
          "fromType": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "The type of the integration to send assets from."
          },
          "toAuthToken": {
            "type": "string",
            "description": "The authentication token of the target integration. Can be used alternatively to the list of requested address (`toAddresses`).\r\nIf used, `toType` should also be provided.",
            "nullable": true
          },
          "toType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "The type of the target integration to send assets to. Used along with the `toAuthToken` alternatively to `toAddresses`.",
            "nullable": true
          },
          "toAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferToAddress"
            },
            "description": "A list of available addresses provided by the API client. The list can contain all supported addresses by the client.\r\nFront API validates the addresses and returns the list of supported tokens and networks as the result of the operation.",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "description": "If provided, Front API returns only networks that support transferring of this symbol.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "If provided, Front API configures the response to only return holdings with enough amount of this crypto for the transfer",
            "format": "double",
            "nullable": true
          },
          "amountInFiat": {
            "type": "number",
            "description": "If provided, Front API configures the response to only contain holdings with enough value (converted to fiat) for the transfer.",
            "format": "double",
            "nullable": true
          },
          "fiatCurrency": {
            "type": "string",
            "description": "Fiat currency that is to get corresponding converted fiat values of transfer and fee amounts. If not provided, defaults to `USD`.",
            "nullable": true
          },
          "networkId": {
            "type": "string",
            "description": "If provided, from API configures the response to include the requested network only.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConfigureTransferResponse": {
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "succeeded",
              "failed",
              "validationFailed",
              "notAuthorizedTo",
              "notAuthorizedFrom",
              "kycRequired",
              "fromIntegrationNotSupported",
              "toIntegrationNotSupported"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ConfigureTransferStatus"
              }
            ],
            "description": "Status of the operation."
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message, if the operation did not complete successfully.",
            "nullable": true
          },
          "holdings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigureTransferResultHolding"
            },
            "description": "List of holdings on the source account.",
            "nullable": true
          },
          "amountInFiat": {
            "type": "number",
            "description": "Amount in USD to transfer. If not provided users can specify amount by themselves.",
            "format": "double",
            "nullable": true
          },
          "minimumTransferAmountInFiat": {
            "type": "number",
            "description": "Minimum transfer amount in fiat",
            "format": "double",
            "nullable": true
          },
          "maximumTransferAmountInFiat": {
            "type": "number",
            "description": "Maximum transfer amount in fiat",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConfigureTransferResponseIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConfigureTransferResponse"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ConfigureTransferResultHolding": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "The symbol of the digital asset on the source account.",
            "nullable": true
          },
          "availableBalance": {
            "type": "number",
            "description": "The available balance of the digital asset.",
            "format": "double"
          },
          "availableBalanceInFiat": {
            "type": "number",
            "description": "The available balance of the digital asset, converted to fiat currency.",
            "format": "double"
          },
          "eligibleForTransfer": {
            "type": "boolean",
            "description": "Specifies if the asset is eligible for a transfer."
          },
          "networks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigureTransferResultNetwork"
            },
            "description": "Supported networks.",
            "nullable": true
          },
          "ineligibilityReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HoldingTransferIneligibilityReason"
              }
            ],
            "description": "The reason indicating why the transfer of the current asset cannot be performed.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConfigureTransferResultNetwork": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the network.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "The Id of the network in Front system.",
            "format": "uuid"
          },
          "minimumAmount": {
            "type": "number",
            "description": "Then minimum amount that can be withdrawn using this network.",
            "format": "double",
            "nullable": true
          },
          "maximumAmount": {
            "type": "number",
            "description": "The maximum amount that can be withdrawn using this network.",
            "format": "double",
            "nullable": true
          },
          "totalEstimatedTransferFeeInFiat": {
            "type": "number",
            "description": "Total estimated transfer fee converted to fiat. Can consist of the fee taken by the financial institution and the\r\ngas fee.",
            "format": "double",
            "nullable": true
          },
          "minimumAmountInFiat": {
            "type": "number",
            "description": "The minimum amount that can be withdrawn using this network, converted to fiat currency.",
            "format": "double",
            "nullable": true
          },
          "maximumAmountInFiat": {
            "type": "number",
            "description": "The maximum amount that can be withdrawn using this network, converted to fiat currency.",
            "format": "double",
            "nullable": true
          },
          "estimatedNetworkGasFee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransferFee"
              }
            ],
            "description": "The gas fee that is estimated to be taken by the network. Depending on the integration, the network gas fee might be\r\ncovered by the `InstitutionTransferFee`.",
            "nullable": true
          },
          "institutionTransferFee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransferFee"
              }
            ],
            "description": "The fee that is taken by the institution. Depending on the institution, can cover the gas fee. Some institutions do not\r\ntake the transfer fee and only network fee is used for the transfer.",
            "nullable": true
          },
          "eligibleForTransfer": {
            "type": "boolean",
            "description": "Specifies if the asset is eligible for a transfer over the current network."
          },
          "ineligibilityReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NetworkTransferIneligibilityReason"
              }
            ],
            "description": "The reason indicating why the transfer cannot be performed over this network.",
            "nullable": true
          },
          "toAddress": {
            "type": "string",
            "description": "The designated destination for sending the asset.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConfigureTransferStatus": {
        "enum": [
          "succeeded",
          "failed",
          "validationFailed",
          "notAuthorizedTo",
          "notAuthorizedFrom",
          "kycRequired",
          "fromIntegrationNotSupported",
          "toIntegrationNotSupported"
        ],
        "type": "string"
      },
      "CountryInfo": {
        "type": "object",
        "properties": {
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "countryNumber": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CryptocurrencyAddressType": {
        "enum": [
          "ethAddress",
          "btcAddress",
          "ltcAddress",
          "solAddress",
          "algoAddress",
          "celoAddress",
          "cardanoAddress",
          "polygonAddress",
          "bnbAddress",
          "elrondAddress",
          "neoAddress",
          "xrpAddress",
          "flowAddress",
          "harmonyOneAddress",
          "tronAddress",
          "dogeAddress",
          "opAddress"
        ],
        "type": "string"
      },
      "DeFiWalletHealthStatusInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExecuteTransferMfaType": {
        "enum": [
          "unspecified",
          "phone",
          "email",
          "totp"
        ],
        "type": "string"
      },
      "ExecuteTransferRequest": {
        "required": [
          "fromAuthToken",
          "fromType",
          "previewId"
        ],
        "type": "object",
        "properties": {
          "fromAuthToken": {
            "minLength": 1,
            "type": "string",
            "description": "The authentication token to send the asset from."
          },
          "fromType": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "The type of the integration to send the asset from."
          },
          "previewId": {
            "type": "string",
            "description": "Id of the Preview of the transfer.",
            "format": "uuid"
          },
          "mfaCode": {
            "type": "string",
            "description": "Multi-factor auth code that should be provided if the status of the transfer was `MfaRequired`.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExecuteTransferResponse": {
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "succeeded",
              "failed",
              "mfaRequired",
              "emailConfirmationRequired",
              "deviceConfirmationRequired",
              "mfaFailed",
              "addressWhitelistRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ExecuteTransferStatus"
              }
            ],
            "description": "The status of the transfer."
          },
          "mfaType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExecuteTransferMfaType"
              }
            ],
            "description": "The type of the MFA when the status is `MfaRequired`.",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message, if the operation did not complete successfully.",
            "nullable": true
          },
          "executeTransferResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExecuteTransferResultResponse"
              }
            ],
            "description": "Result of the transfer initiation.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExecuteTransferResponseIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExecuteTransferResponse"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ExecuteTransferResultResponse": {
        "type": "object",
        "properties": {
          "transferId": {
            "type": "string",
            "description": "The Id of the transfer by the integration.",
            "nullable": true
          },
          "status": {
            "enum": [
              "unknown",
              "failed",
              "frozen",
              "succeeded",
              "mfaRequired",
              "pending",
              "expired",
              "canceled",
              "waitingForSignature",
              "waitingForClearing",
              "awaitingApproval",
              "awaitingConfirmation",
              "awaitingVerification",
              "rejected",
              "pendingCancel",
              "emailVerification",
              "deviceConfirmationRequired",
              "mfaFailed",
              "addressWhitelistRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerCryptocurrencyTransactionStatus"
              }
            ],
            "description": "The current status of the transfer."
          },
          "statusDetails": {
            "type": "string",
            "description": "Details of the current status of the transfer, as provided by the integration.",
            "nullable": true
          },
          "fromAddress": {
            "type": "string",
            "description": "The address of the source account or wallet.",
            "nullable": true
          },
          "toAddress": {
            "type": "string",
            "description": "The address of the target account or wallet.",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "description": "Transferred symbol.",
            "nullable": true
          },
          "networkName": {
            "type": "string",
            "description": "The name of the used network.",
            "nullable": true
          },
          "networkId": {
            "type": "string",
            "description": "The Id of the used network in Front system.",
            "format": "uuid"
          },
          "hash": {
            "type": "string",
            "description": "The hash of the blockchain transaction.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The transferred amount, in the symbol of the transfer.",
            "format": "double"
          },
          "amountInFiat": {
            "type": "number",
            "description": "The transferred amount, converted to the fiat currency.",
            "format": "double"
          },
          "totalAmountInFiat": {
            "type": "number",
            "description": "Total amount of the transfer including all fees, converted to fiat.",
            "format": "double"
          },
          "completedConfirmations": {
            "type": "integer",
            "description": "Current number of network confirmations.",
            "format": "int64",
            "nullable": true
          },
          "institutionTransferFee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransferFee"
              }
            ],
            "description": "The fee that was taken by the institution.",
            "nullable": true
          },
          "networkGasFee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransferFee"
              }
            ],
            "description": "The gas fee that was taken by the network. Depending on the integration, the network gas fee might be\r\ncovered by the `InstitutionTransferFee`.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExecuteTransferStatus": {
        "enum": [
          "succeeded",
          "failed",
          "mfaRequired",
          "emailConfirmationRequired",
          "deviceConfirmationRequired",
          "mfaFailed",
          "addressWhitelistRequired"
        ],
        "type": "string"
      },
      "FinancialInstitutionIntegrationType": {
        "enum": [
          "brokerage",
          "bank",
          "exchange",
          "wallet",
          "address",
          "nftMarketplace",
          "deFiWallet"
        ],
        "type": "string"
      },
      "GetLinkTokenRequest": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "A unique Id representing the end user. Typically this will be a user Id from the\r\nclient application. Personally identifiable information, such as an email address or phone number,\r\nshould not be used. 50 characters length maximum."
          },
          "brokerType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of integration to redirect to. Will redirect to catalog if not provided.\r\nNot supported types: DeFiWallet, CryptocurrencyAddress, CryptocurrencyWallet.",
            "nullable": true,
            "deprecated": true
          },
          "restrictMultipleAccounts": {
            "type": "boolean",
            "description": "The final screen of Link allows users to “continue” back to your app or “Link another account.”\r\nIf this param is present then this button will be hidden."
          },
          "transferOptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkTokenTransferOptions"
              }
            ],
            "description": "Encapsulates transaction-related parameters, including destination addresses and the amount to transfer in fiat currency.",
            "nullable": true
          },
          "integrationId": {
            "type": "string",
            "description": "A unique identifier representing a specific integration obtained from the list of available integrations.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HoldingTransferIneligibilityReason": {
        "enum": [
          "noEligibleNetworks",
          "symbolDoesNotMatch",
          "notSupportedForTransferByTarget",
          "notSupportedForTransferBySource"
        ],
        "type": "string"
      },
      "IApiResult": {
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "InitializeTransfersForLinkRequest": {
        "type": "object",
        "properties": {
          "toAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferToAddress"
            },
            "description": "The list of destination addresses with corresponding networks are asset symbols that\r\ncan be used to initiate incoming transfers.",
            "nullable": true
          },
          "amountInFiat": {
            "type": "number",
            "description": "Amount in USD to transfer. If not provided users can specify amount by themselves.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IntegrationModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ]
          },
          "deFiWalletProviderId": {
            "type": "string",
            "nullable": true
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FinancialInstitutionIntegrationType"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IntegrationNetworkResponse": {
        "type": "object",
        "properties": {
          "integrations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IntegrationNetworksModelResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IntegrationNetworkResponseIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegrationNetworkResponse"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "IntegrationNetworksModelResponse": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the integration."
          },
          "networks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkResponse"
            },
            "description": "The list of supported networks and corresponding tokens for the integration.",
            "nullable": true
          },
          "supportsOutgoingTransfers": {
            "type": "boolean",
            "description": "Specifies if the integration supports outgoing transfers."
          },
          "supportsIncomingTransfers": {
            "type": "boolean",
            "description": "Specifies if the integration supports incoming transfers."
          }
        },
        "additionalProperties": false
      },
      "IntegrationsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IntegrationModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IntegrationsResponseIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegrationsResponse"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LinkTokenModel": {
        "type": "object",
        "properties": {
          "linkToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LinkTokenModelIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkTokenModel"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LinkTokenTransferOptions": {
        "type": "object",
        "properties": {
          "toAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferToAddress"
            },
            "description": "The list of destination addresses with corresponding networks are asset symbols that\r\ncan be used to initiate incoming transfers. If this parameter is present, the Link\r\nsession will continue to transfer flow after connecting the origin account.",
            "nullable": true
          },
          "amountInFiat": {
            "type": "number",
            "description": "Amount in USD to transfer. If not provided users can specify amount by themselves.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MfaScheme": {
        "enum": [
          "mfaCode",
          "challenge",
          "deviceConfirmation",
          "securityQuestion"
        ],
        "type": "string"
      },
      "MfaType": {
        "enum": [
          "phone",
          "email",
          "totp",
          "phoneAndEmail",
          "requireNextSecurityQuestion",
          "readEmail"
        ],
        "type": "string"
      },
      "NetworkModelResponse": {
        "type": "object",
        "properties": {
          "networks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkResponseWithIntegrations"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NetworkModelResponseIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NetworkModelResponse"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "NetworkResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Id of the network in Front system. Should be used to initiate transfers.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name if the network.",
            "nullable": true
          },
          "chainId": {
            "type": "string",
            "description": "The Inner id of the chain, used for reference. For example, Polygon's (MATIC) chain Id is 137.",
            "nullable": true
          },
          "supportedTokens": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of tokens that are currently supported to be transferred using the network.",
            "nullable": true
          },
          "nativeSymbol": {
            "type": "string",
            "description": "The symbol of the network's native cryptocurrency.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NetworkResponseWithIntegrations": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Id of the network in Front system. Should be used to initiate transfers.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name if the network.",
            "nullable": true
          },
          "chainId": {
            "type": "string",
            "description": "The Inner id of the chain, used for reference. For example, Polygon's (MATIC) chain Id is 137.",
            "nullable": true
          },
          "supportedTokens": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of tokens that are currently supported to be transferred using the network.",
            "nullable": true
          },
          "nativeSymbol": {
            "type": "string",
            "description": "The symbol of the network's native cryptocurrency.",
            "nullable": true
          },
          "supportedBrokerTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrokerType"
            },
            "description": "The list of types of integrations that are currently supported to perform transfers over the network.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NetworkTransferIneligibilityReason": {
        "enum": [
          "amountNotSufficient",
          "gasFeeAssetBalanceNotEnough",
          "noTargetNetworkFound",
          "refusedByInstitution"
        ],
        "type": "string"
      },
      "NftBlockchain": {
        "enum": [
          "ethereum",
          "polygon",
          "klaytn"
        ],
        "type": "string"
      },
      "NftOrder": {
        "type": "object",
        "properties": {
          "orderSide": {
            "enum": [
              "buy",
              "sell"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/NftOrderSide"
              }
            ]
          },
          "symbol": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "priceUsd": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "createdTimestamp": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "updatedTimestamp": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "symbolLogo": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NftOrderSide": {
        "enum": [
          "buy",
          "sell"
        ],
        "type": "string"
      },
      "NftPositionWithMarketValues": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "costBasis": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "contractAddress": {
            "type": "string",
            "nullable": true
          },
          "paymentTokenSymbol": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "imageOriginalUrl": {
            "type": "string",
            "nullable": true
          },
          "animationUrl": {
            "type": "string",
            "nullable": true
          },
          "backgroundColor": {
            "type": "string",
            "nullable": true
          },
          "marketplaceId": {
            "type": "integer",
            "format": "int64"
          },
          "tokenId": {
            "type": "string",
            "nullable": true
          },
          "numberOfSales": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "contractType": {
            "type": "string",
            "nullable": true
          },
          "contractName": {
            "type": "string",
            "nullable": true
          },
          "contractSchemaName": {
            "type": "string",
            "nullable": true
          },
          "contractSymbol": {
            "type": "string",
            "nullable": true
          },
          "contractDescription": {
            "type": "string",
            "nullable": true
          },
          "marketplacePermalink": {
            "type": "string",
            "nullable": true
          },
          "contractExternalLink": {
            "type": "string",
            "nullable": true
          },
          "creatorAddress": {
            "type": "string",
            "nullable": true
          },
          "currentOffer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NftOrder"
              }
            ],
            "nullable": true
          },
          "lastSale": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NftOrder"
              }
            ],
            "nullable": true
          },
          "blockchain": {
            "enum": [
              "ethereum",
              "polygon",
              "klaytn"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/NftBlockchain"
              }
            ]
          },
          "addressExplorerLink": {
            "type": "string",
            "nullable": true
          },
          "twitterUsername": {
            "type": "string",
            "nullable": true
          },
          "marketValue": {
            "type": "number",
            "description": "Amount of NFTs multiplied by NFT value",
            "format": "double",
            "nullable": true
          },
          "portfolioPercentage": {
            "type": "number",
            "description": "What percentage of total portfolio value is taken by this NFT",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioBrokerBaseRequest": {
        "required": [
          "authToken",
          "type"
        ],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect\n\n### Supported integrations:\n```Robinhood```\n```ETrade```\n```Alpaca```\n```TdAmeritrade```\n```WeBull```\n```Stash```\n```InteractiveBrokers```\n```Public```\n```Coinbase```\n```Kraken```\n```CoinbasePro```\n```CryptoCom```\n```OpenSea```\n```Binance```\n```Gemini```\n```OkCoin```\n```Bittrex```\n```KuCoin```\n```Etoro```\n```CexIo```\n```BinanceInternational```\n```Bitstamp```\n```GateIo```\n```Acorns```\n```Okx```\n```BitFlyer```\n```Coinlist```\n```Huobi```\n```Bitfinex```\n```KrakenDirect```\n```Vanguard```\n```BinanceInternationalDirect```\n```BitfinexDirect```\n```Bybit```\n```DeFiWallet```\n"
          }
        },
        "additionalProperties": false
      },
      "PortfolioFiatBalance": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Balance currency",
            "nullable": true
          },
          "cash": {
            "type": "number",
            "description": "Amount of money in a specific currency from all brokers",
            "format": "double",
            "nullable": true
          },
          "buyingPower": {
            "type": "number",
            "description": "BuyingPower from all brokers, it indicates total amount of money the user can spend on buying stock.\r\nAlways includes cash and can also include margin",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PreviewTransferRequest": {
        "required": [
          "fromAuthToken",
          "fromType"
        ],
        "type": "object",
        "properties": {
          "fromAuthToken": {
            "minLength": 1,
            "type": "string",
            "description": "The authentication token to send the asset from."
          },
          "fromType": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "The type of the integration to send the asset from."
          },
          "toAuthToken": {
            "type": "string",
            "description": "The authentication token of the target integration. Can be used alternatively to the address in the `ToAddress` field.\r\nIf used, `toType` should also be provided.",
            "nullable": true
          },
          "toType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "The type of the target integration to send assets to. Used along with the `toAuthToken` alternatively to `ToAddress`.",
            "nullable": true
          },
          "networkId": {
            "type": "string",
            "description": "The network to send the asset over.",
            "format": "uuid"
          },
          "symbol": {
            "type": "string",
            "description": "The symbol of the digital asset to send.",
            "nullable": true
          },
          "toAddress": {
            "type": "string",
            "description": "The target address to send the asset to.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The amount to send, in crypto.",
            "format": "double",
            "nullable": true
          },
          "amountInFiat": {
            "type": "number",
            "description": "The amount to send, in fiat currency. Can be used alternatively to `Amount`.",
            "format": "double",
            "nullable": true
          },
          "fiatCurrency": {
            "type": "string",
            "description": "Fiat currency that is to get corresponding converted fiat values of transfer and fee amounts. If not provided, defaults to `USD`.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PreviewTransferResponse": {
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "succeeded",
              "failed"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/PreviewTransferStatus"
              }
            ],
            "description": "The status of the operation."
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message, if the operation did not complete successfully.",
            "nullable": true
          },
          "previewResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PreviewTransferResult"
              }
            ],
            "description": "Result of the preview.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PreviewTransferResponseIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PreviewTransferResponse"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PreviewTransferResult": {
        "type": "object",
        "properties": {
          "previewId": {
            "type": "string",
            "description": "The Id of the preview of the transfer. Should be used to commit the transfer using `Execute` endpoint.",
            "format": "uuid"
          },
          "previewExpiresIn": {
            "type": "integer",
            "description": "The period of time in seconds during which the transfer can be committed.",
            "format": "int32"
          },
          "fromAddress": {
            "type": "string",
            "description": "Obtained address that will be used to send the transfer. Not guaranteed to be returned by some of integrations.",
            "nullable": true
          },
          "toAddress": {
            "type": "string",
            "description": "The target address to send the asset to.",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "description": "Symbol of the asset to be sent.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Amount in symbol. If the transfer was requested using `AmounInFiat` field, this field represents the exact amount\r\nof the asset that will be transferred.",
            "format": "double"
          },
          "amountInFiat": {
            "type": "number",
            "description": "Transfer amount in fiat. If the transfer was requested in crypto amount using the `Amount` field,\r\nthis field contains the corresponding converted to fiat value.",
            "format": "double"
          },
          "totalEstimatedAmountInFiat": {
            "type": "number",
            "description": "Total estimated amount of the transfer including all fees, converted to fiat.",
            "format": "double"
          },
          "networkId": {
            "type": "string",
            "description": "Id of the network in Front system.",
            "format": "uuid"
          },
          "networkName": {
            "type": "string",
            "description": "Name of the network in Front system.",
            "nullable": true
          },
          "contractAddress": {
            "type": "string",
            "description": "Blockchain address of the transferred token's contract",
            "nullable": true
          },
          "institutionTransferFee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransferFee"
              }
            ],
            "description": "The fee that is taken by the institution. Depending on the institution, can cover the gas fee. Some institutions do not\r\ntake the transfer fee and only network fee is used for the transfer.",
            "nullable": true
          },
          "estimatedNetworkGasFee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransferFee"
              }
            ],
            "description": "The gas fee that is estimated to be taken by the network. Depending on the integration, the network gas fee might be\r\ncovered by the `InstitutionTransferFee`.",
            "nullable": true
          },
          "decimalPlaces": {
            "type": "integer",
            "description": "Number of decimal places used to represent the token's smallest unit",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PreviewTransferStatus": {
        "enum": [
          "succeeded",
          "failed"
        ],
        "type": "string"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "SymbolTradingAllowance": {
        "enum": [
          "fractionalTradingAllowed",
          "fractionalTradingNotAllowed",
          "tradingNotAllowed",
          "fractionalTradingPossiblyAllowed"
        ],
        "type": "string"
      },
      "TranferOrderByFields": {
        "enum": [
          "id",
          "clientTransferId",
          "userId",
          "fromType",
          "amountInFiat",
          "status",
          "createdTimestamp"
        ],
        "type": "string"
      },
      "TranferStatus": {
        "enum": [
          "pending",
          "succeeded",
          "failed"
        ],
        "type": "string"
      },
      "TransactionsB2BBrokerCreateOrderRequest": {
        "required": [
          "amount",
          "amountIsInPaymentSymbol",
          "authToken",
          "isCryptocurrency",
          "orderType",
          "paymentIsCryptocurrency",
          "paymentSymbol",
          "symbol",
          "timeInForce",
          "type"
        ],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect\n\n### Supported integrations:\n```Robinhood```\n```ETrade```\n```Alpaca```\n```TdAmeritrade```\n```WeBull```\n```Stash```\n```InteractiveBrokers```\n```Public```\n```Coinbase```\n```Kraken```\n```CoinbasePro```\n```CryptoCom```\n```Binance```\n```Gemini```\n```OkCoin```\n```Bittrex```\n```KuCoin```\n```Etoro```\n```CexIo```\n```BinanceInternational```\n```Bitstamp```\n```GateIo```\n```Okx```\n```BitFlyer```\n```Coinlist```\n```Huobi```\n```Bitfinex```\n```KrakenDirect```\n```Vanguard```\n```BinanceInternationalDirect```\n```Bybit```\n"
          },
          "symbol": {
            "minLength": 1,
            "type": "string",
            "description": "Symbol to trade. For example, `AAPL` or `ETH`"
          },
          "paymentSymbol": {
            "minLength": 1,
            "type": "string",
            "description": "Symbol to use for payment, defaults to `USD`."
          },
          "amount": {
            "type": "number",
            "description": "Amount of purchase.",
            "format": "double"
          },
          "price": {
            "type": "number",
            "description": "Price of the unit, used for `Limit` and `StopLoss` orders.",
            "format": "double"
          },
          "isCryptocurrency": {
            "type": "boolean",
            "description": "Some Stock and Crypto symbols can intersect, so the type of the asset needs to be specified explicitly."
          },
          "paymentIsCryptocurrency": {
            "type": "boolean",
            "description": "Indicates whether the `PaymentSymbol` is fiat or cryptocurrency"
          },
          "amountIsFiat": {
            "type": "boolean",
            "nullable": true,
            "deprecated": true
          },
          "amountInFiat": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "deprecated": true
          },
          "amountIsInPaymentSymbol": {
            "type": "boolean",
            "description": "This value indicates if the order should be executed in payment/quote currency amount (e.g. purchase ETH for $10). This can be\r\nperformed only if the current institution supports such orders (`SupportsPlacingSellOrdersInPaymentSymbolAmount` and\r\n`SupportsPlacingBuyOrdersInPaymentSymbolAmount` fields in `get supported order features for institution`) and `AmountInPaymentSymbol`\r\nvalue is passed."
          },
          "amountInPaymentSymbol": {
            "type": "number",
            "description": "Specifies the target amount in the payment/quote currency. For example, setting this to `10` when the `AmountInPaymentSymbol` = `true`\r\nand `PaymentSymbol` = `USD` will instruct the API to place an order to buy/sell the asset worth $10.",
            "format": "double",
            "nullable": true
          },
          "extendedHours": {
            "type": "boolean",
            "description": "Specifies if the extended trading hours should be used."
          },
          "orderType": {
            "enum": [
              "market",
              "limit",
              "stopLoss"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderPlaceTypeTrade"
              }
            ]
          },
          "timeInForce": {
            "enum": [
              "goodTillCanceled",
              "immediateOrCancel",
              "fillOrKill",
              "goodForDay",
              "postOnly",
              "unknown"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderTimeInForceType"
              }
            ]
          },
          "mfaCode": {
            "type": "string",
            "description": "MFA Code to create an order (requested by Kraken if MFA is enabled in user settings)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionsB2BBrokerOrderListRequest": {
        "required": [
          "authToken",
          "type"
        ],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect\n\n### Supported integrations:\n```Robinhood```\n```ETrade```\n```Alpaca```\n```TdAmeritrade```\n```WeBull```\n```Stash```\n```InteractiveBrokers```\n```Public```\n```Coinbase```\n```Kraken```\n```CoinbasePro```\n```CryptoCom```\n```Binance```\n```Gemini```\n```OkCoin```\n```Bittrex```\n```KuCoin```\n```Etoro```\n```CexIo```\n```BinanceInternational```\n```Bitstamp```\n```GateIo```\n```Okx```\n```BitFlyer```\n```Coinlist```\n```Huobi```\n```Bitfinex```\n```KrakenDirect```\n```Vanguard```\n```BinanceInternationalDirect```\n```Bybit```\n"
          },
          "cursor": {
            "type": "string",
            "description": "The cursor to retrieve the next page of transactions.\r\nProviding it will cause the response to only return changes after this update.\r\nIf this field is not provided, the history of transactions will be returned starting with the first-added transaction.",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "description": "Number of records to include in the response. <br />\r\nDefault: `100` <br />\r\nMaximum: `250`",
            "format": "int32"
          },
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrokerOrderStatus"
            },
            "description": "Return orders of this statuses only. If this field is not provided, orders with all available statuses will be returned.",
            "nullable": true
          },
          "from": {
            "type": "integer",
            "description": "Return orders created after this timestamp.\r\nIf this field is not provided, orders will be returned according to the default of the institution.",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionsB2BBrokerOrderRequest": {
        "required": [
          "authToken",
          "id",
          "isCryptocurrency",
          "type"
        ],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect\n\n### Supported integrations:\n```Robinhood```\n```ETrade```\n```Alpaca```\n```TdAmeritrade```\n```WeBull```\n```Stash```\n```InteractiveBrokers```\n```Public```\n```Coinbase```\n```Kraken```\n```CoinbasePro```\n```CryptoCom```\n```Binance```\n```Gemini```\n```OkCoin```\n```Bittrex```\n```KuCoin```\n```Etoro```\n```CexIo```\n```BinanceInternational```\n```Bitstamp```\n```GateIo```\n```Okx```\n```BitFlyer```\n```Coinlist```\n```Huobi```\n```Bitfinex```\n```KrakenDirect```\n```Vanguard```\n```BinanceInternationalDirect```\n```Bybit```\n"
          },
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "side": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderType"
              }
            ],
            "description": "Should be provided for Coinbase.",
            "nullable": true
          },
          "isCryptocurrency": {
            "type": "boolean",
            "description": "Some Stock and Crypto symbols can intersect, so we need to explicitly specify what type of asset is requested to be bought."
          },
          "symbolPair": {
            "type": "string",
            "description": "Symbol pair of the order (requested by some brokers).",
            "nullable": true
          },
          "mfaCode": {
            "type": "string",
            "description": "MFA Code to cancel an order (requested by Kraken if MFA is enabled in user settings)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionsB2BBrokerSymbolInfoForOrderRequest": {
        "required": [
          "amount",
          "amountIsInPaymentSymbol",
          "authToken",
          "isCryptocurrency",
          "orderType",
          "paymentIsCryptocurrency",
          "paymentSymbol",
          "symbol",
          "timeInForce",
          "type"
        ],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect\n\n### Supported integrations:\n```Robinhood```\n```ETrade```\n```Alpaca```\n```TdAmeritrade```\n```WeBull```\n```Stash```\n```InteractiveBrokers```\n```Public```\n```Coinbase```\n```Kraken```\n```CoinbasePro```\n```CryptoCom```\n```Binance```\n```Gemini```\n```OkCoin```\n```Bittrex```\n```KuCoin```\n```Etoro```\n```CexIo```\n```BinanceInternational```\n```Bitstamp```\n```GateIo```\n```Okx```\n```BitFlyer```\n```Coinlist```\n```Huobi```\n```Bitfinex```\n```KrakenDirect```\n```Vanguard```\n```BinanceInternationalDirect```\n```Bybit```\n"
          },
          "symbol": {
            "minLength": 1,
            "type": "string",
            "description": "Symbol to trade. For example, `AAPL` or `ETH`"
          },
          "paymentSymbol": {
            "minLength": 1,
            "type": "string",
            "description": "Symbol to use for payment, defaults to `USD`."
          },
          "amount": {
            "type": "number",
            "description": "Amount of purchase.",
            "format": "double"
          },
          "price": {
            "type": "number",
            "description": "Price of the unit, used for `Limit` and `StopLoss` orders.",
            "format": "double"
          },
          "isCryptocurrency": {
            "type": "boolean",
            "description": "Some Stock and Crypto symbols can intersect, so the type of the asset needs to be specified explicitly."
          },
          "paymentIsCryptocurrency": {
            "type": "boolean",
            "description": "Indicates whether the `PaymentSymbol` is fiat or cryptocurrency"
          },
          "amountIsFiat": {
            "type": "boolean",
            "nullable": true,
            "deprecated": true
          },
          "amountInFiat": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "deprecated": true
          },
          "amountIsInPaymentSymbol": {
            "type": "boolean",
            "description": "This value indicates if the order should be executed in payment/quote currency amount (e.g. purchase ETH for $10). This can be\r\nperformed only if the current institution supports such orders (`SupportsPlacingSellOrdersInPaymentSymbolAmount` and\r\n`SupportsPlacingBuyOrdersInPaymentSymbolAmount` fields in `get supported order features for institution`) and `AmountInPaymentSymbol`\r\nvalue is passed."
          },
          "amountInPaymentSymbol": {
            "type": "number",
            "description": "Specifies the target amount in the payment/quote currency. For example, setting this to `10` when the `AmountInPaymentSymbol` = `true`\r\nand `PaymentSymbol` = `USD` will instruct the API to place an order to buy/sell the asset worth $10.",
            "format": "double",
            "nullable": true
          },
          "extendedHours": {
            "type": "boolean",
            "description": "Specifies if the extended trading hours should be used."
          },
          "orderType": {
            "enum": [
              "market",
              "limit",
              "stopLoss"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderPlaceTypeTrade"
              }
            ]
          },
          "timeInForce": {
            "enum": [
              "goodTillCanceled",
              "immediateOrCancel",
              "fillOrKill",
              "goodForDay",
              "postOnly",
              "unknown"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderTimeInForceType"
              }
            ]
          },
          "mfaCode": {
            "type": "string",
            "description": "MFA Code to create an order (requested by Kraken if MFA is enabled in user settings)",
            "nullable": true
          },
          "side": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderType"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionsBrokerBaseRequest": {
        "required": [
          "authToken",
          "type"
        ],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect\n\n### Supported integrations:\n```Robinhood```\n```ETrade```\n```Alpaca```\n```TdAmeritrade```\n```WeBull```\n```Stash```\n```InteractiveBrokers```\n```Public```\n```Coinbase```\n```Kraken```\n```CoinbasePro```\n```CryptoCom```\n```Binance```\n```Gemini```\n```OkCoin```\n```Bittrex```\n```KuCoin```\n```Etoro```\n```CexIo```\n```BinanceInternational```\n```Bitstamp```\n```GateIo```\n```Okx```\n```BitFlyer```\n```Coinlist```\n```Huobi```\n```Bitfinex```\n```KrakenDirect```\n```Vanguard```\n```BinanceInternationalDirect```\n```Bybit```\n"
          }
        },
        "additionalProperties": false
      },
      "TransferCryptocurrencyFundingOptions": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Indicates whether the Link is permitted to use the end user's available buying power\r\nand/or payment methods to supplement the cryptocurrency balance if it is insufficient\r\nfor the transfer."
          }
        },
        "additionalProperties": false
      },
      "TransferFee": {
        "type": "object",
        "properties": {
          "fee": {
            "type": "number",
            "description": "The amount of the fee.",
            "format": "double"
          },
          "feeCurrency": {
            "type": "string",
            "description": "The currency of the fee. Does not match the currency of the transfer in some cases.",
            "nullable": true
          },
          "feeInFiat": {
            "type": "number",
            "description": "The value of the fee converted to the fiat currency.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "TransferIntegrationModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ]
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransferModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Mesh transfer identifier.",
            "format": "uuid"
          },
          "clientTransactionId": {
            "type": "string",
            "description": "Client transaction identifier.",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "Client's user identifier.",
            "nullable": true
          },
          "status": {
            "enum": [
              "pending",
              "succeeded",
              "failed"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/TranferStatus"
              }
            ],
            "description": "Transfer status."
          },
          "amountInFiat": {
            "type": "number",
            "description": "Tranfer amount in fiat.",
            "format": "double"
          },
          "amountInFiatCurrencyCode": {
            "type": "string",
            "description": "Tranfer amount in fiat currency code.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Tranfer amount.",
            "format": "double"
          },
          "symbol": {
            "type": "string",
            "description": "Tranfer cryptocurrency symbol.",
            "nullable": true
          },
          "networkName": {
            "type": "string",
            "description": "Tranfer network name.",
            "nullable": true
          },
          "createdTimestamp": {
            "type": "integer",
            "description": "Created timestamp.",
            "format": "int64"
          },
          "from": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransferIntegrationModel"
              }
            ],
            "description": "From integration.",
            "nullable": true
          },
          "hash": {
            "type": "string",
            "description": "Transfer hash.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransferModelPaginationResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferModel"
            },
            "description": "list of items",
            "nullable": true
          },
          "total": {
            "type": "integer",
            "description": "Total number of items",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TransferModelPaginationResponseApiResult": {
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest",
              "locked"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "description": "A message generated by the API",
            "nullable": true
          },
          "displayMessage": {
            "type": "string",
            "description": "User-friendly display message that can be presented to the end user",
            "nullable": true
          },
          "errorType": {
            "type": "string",
            "description": "Strictly-typed error type that is explaining the reason of an unsuccessful status of the operation.\r\nAll possible error types are available in the documentation.",
            "nullable": true
          },
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransferModelPaginationResponse"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransferToAddress": {
        "type": "object",
        "properties": {
          "networkId": {
            "type": "string",
            "description": "The Id of the network in Front system. The list of all available networks can be obtained by using `GET /transfers/managed/networks` endpoint.",
            "format": "uuid"
          },
          "symbol": {
            "type": "string",
            "description": "The symbol of the digital asset.",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "The address to send the asset to.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransfersBrokerCreateCryptocurrencyTransactionRequest": {
        "required": [
          "authToken",
          "targetAddress",
          "type"
        ],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect\n\n### Supported integrations:\n```Robinhood```\n```Coinbase```\n```Kraken```\n```CoinbasePro```\n```CryptoCom```\n```Binance```\n```Gemini```\n```OkCoin```\n```Bittrex```\n```KuCoin```\n```BinanceInternational```\n```Bitstamp```\n```GateIo```\n```Okx```\n```Huobi```\n```Bitfinex```\n```KrakenDirect```\n```BinanceInternationalDirect```\n```Bybit```\n```DeFiWallet```\n"
          },
          "data": {
            "type": "string",
            "description": "Additional data to send on-chain (optional, depends on an integration)",
            "nullable": true
          },
          "targetAddress": {
            "minLength": 1,
            "type": "string",
            "description": "Target address to transfer the asset to"
          },
          "amount": {
            "type": "number",
            "description": "Amount to transfer",
            "format": "double"
          },
          "fee": {
            "type": "number",
            "description": "On-chain fee (optional, depends on an integration)",
            "format": "double"
          },
          "addressType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptocurrencyAddressType"
              }
            ],
            "description": "Type of the address of symbol to be transferred. Providing `EthAddress` will initiate a transfer of ETH over Ethereum blockchain.\r\nCan be used instead of `Symbol` and `Chain` fields.\r\nTo transfer assets over non-default chains (e.g. sending USDT over ERC20) please `Symbol` and `Chain` fields.",
            "nullable": true
          },
          "mfaCode": {
            "type": "string",
            "description": "2 Factor auth code (optional, depends on an integration)",
            "nullable": true
          },
          "mfaType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MfaType"
              }
            ],
            "description": "2 Factor auth type (optional, depends on an integration)",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "Password or pass-phrase, required to send transfers (optional, depends on an integration)",
            "nullable": true
          },
          "chain": {
            "type": "string",
            "description": "Custom chain name, required by some of the integrations. E.g. USDT can be sent over USDT-ERC20, USDT-TRC20, and USDT-Omni.\r\nCan be used to transfer assets over non-default chains (e.g. sending USDT over ERC20).\r\nPlease use `symbol/details` endpoint to get the list of all possible chains.",
            "nullable": true
          },
          "memo": {
            "type": "string",
            "description": "Memo (also called \"Tag\") - address remark.",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "description": "Symbol to be transferred. Can be provided instead of the `AddressType` field.",
            "nullable": true
          },
          "challengeId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransfersBrokerCryptocurrencyDepositAddressRequest": {
        "required": [
          "authToken",
          "type"
        ],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect\n\n### Supported integrations:\n```Robinhood```\n```Coinbase```\n```Kraken```\n```CoinbasePro```\n```CryptoCom```\n```Binance```\n```Gemini```\n```OkCoin```\n```Bittrex```\n```KuCoin```\n```BinanceInternational```\n```Bitstamp```\n```GateIo```\n```Okx```\n```Huobi```\n```Bitfinex```\n```KrakenDirect```\n```BinanceInternationalDirect```\n```Bybit```\n```DeFiWallet```\n"
          },
          "symbol": {
            "type": "string",
            "description": "Symbol of the required cryptocurrency, e.g. ETH or BTC.\r\nCan be used instead of the `AddressType` field.",
            "nullable": true
          },
          "addressType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptocurrencyAddressType"
              }
            ],
            "description": "Type of the address of symbol to be transferred. Providing `EthAddress` will assume a transfer of ETH over Ethereum blockchain.\r\nCan be used instead of `Symbol` field.",
            "nullable": true
          },
          "chain": {
            "type": "string",
            "description": "Chain of the required cryptocurrency, e.g. USDT has USDT-ERC20, USDT-TRC20, and USDT-Omni",
            "nullable": true
          },
          "mfaCode": {
            "type": "string",
            "description": "Some of integrations require MFA code to create a deposit address, e.g. KrakenDirect",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransfersBrokerCryptocurrencyTransactionDetailsRequest": {
        "required": [
          "authToken",
          "type"
        ],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect\n\n### Supported integrations:\n```Robinhood```\n```Coinbase```\n```Kraken```\n```CoinbasePro```\n```CryptoCom```\n```Binance```\n```Gemini```\n```OkCoin```\n```Bittrex```\n```KuCoin```\n```BinanceInternational```\n```Bitstamp```\n```GateIo```\n```Okx```\n```Huobi```\n```Bitfinex```\n```KrakenDirect```\n```BinanceInternationalDirect```\n```Bybit```\n```DeFiWallet```\n"
          },
          "addressType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptocurrencyAddressType"
              }
            ],
            "description": "Type of the address of the transferred asset. Can be used instead of the `Symbol` field.",
            "nullable": true
          },
          "transactionId": {
            "type": "string",
            "description": "Transaction Id by the financial institution",
            "nullable": true
          },
          "transactionHash": {
            "type": "string",
            "description": "Hash of the transaction on the blockchain",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "description": "Symbol of the transferred asset. Can be provided instead of the `AddressType` field.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransfersBrokerTransactionsListRequest": {
        "required": [
          "authToken",
          "type"
        ],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex",
              "deFiWallet",
              "krakenDirect",
              "vanguard",
              "binanceInternationalDirect",
              "bitfinexDirect",
              "bybit"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect\n\n### Supported integrations:\n```Robinhood```\n```Coinbase```\n```Kraken```\n```CoinbasePro```\n```CryptoCom```\n```Binance```\n```Gemini```\n```OkCoin```\n```Bittrex```\n```KuCoin```\n```BinanceInternational```\n```Bitstamp```\n```GateIo```\n```Okx```\n```Huobi```\n```Bitfinex```\n```KrakenDirect```\n```BinanceInternationalDirect```\n```Bybit```\n```DeFiWallet```\n"
          },
          "count": {
            "type": "integer",
            "description": "Number of records to include in the response. <br />\r\nDefault: `100` <br />\r\nMaximum: `250`",
            "format": "int32"
          },
          "cursor": {
            "type": "string",
            "description": "The cursor to retrieve the next page of transactions.\r\nProviding it will cause the response to only return changes after this update.\r\nIf this field is not provided, the history of transactions will be returned starting with the first-added transaction.",
            "nullable": true
          },
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrokerCryptocurrencyTransactionStatus"
            },
            "description": "If this value is provided, result set is filtered to only include transaction with the provided statuses.",
            "nullable": true
          },
          "cryptocurrencyAddressType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptocurrencyAddressType"
              }
            ],
            "description": "For cryptocurrency address the type of address is required.",
            "nullable": true
          },
          "from": {
            "type": "integer",
            "description": "If this value is provided, result set is filtered to only include transactions created after this timestamp",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Client-Secret": {
        "type": "apiKey",
        "description": "Contact Front to get client Secret",
        "name": "X-Client-Secret",
        "in": "header"
      },
      "Client-Id": {
        "type": "apiKey",
        "description": "Contact Front to get client Id",
        "name": "X-Client-Id",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Client-Secret": [ ],
      "Client-Id": [ ]
    }
  ],
  "tags": [
    {
      "name": "Managed Account Authentication",
      "description": "The recommended approach for account authentication. Front manages multiple authentication flows and handles all authentication steps such as MFA codes and OAuth redirect through our web and mobile SDKs."
    },
    {
      "name": "Self Managed Account Authentication",
      "description": "Not recommended approach. Using this approach, the API client is responsible for handling multiple authentication flows and supporting future updates and changes."
    },
    {
      "name": "Portfolio",
      "description": "\n\n### Supported integrations:\n```Robinhood```\n```ETrade```\n```Alpaca```\n```TdAmeritrade```\n```WeBull```\n```Stash```\n```InteractiveBrokers```\n```Public```\n```Coinbase```\n```Kraken```\n```CoinbasePro```\n```CryptoCom```\n```OpenSea```\n```Binance```\n```Gemini```\n```OkCoin```\n```Bittrex```\n```KuCoin```\n```Etoro```\n```CexIo```\n```BinanceInternational```\n```Bitstamp```\n```GateIo```\n```Acorns```\n```Okx```\n```BitFlyer```\n```Coinlist```\n```Huobi```\n```Bitfinex```\n```KrakenDirect```\n```Vanguard```\n```BinanceInternationalDirect```\n```BitfinexDirect```\n```Bybit```\n```DeFiWallet```\n"
    },
    {
      "name": "Balance",
      "description": "\n\n### Supported integrations:\n```Robinhood```\n```ETrade```\n```Alpaca```\n```TdAmeritrade```\n```WeBull```\n```Stash```\n```InteractiveBrokers```\n```Public```\n```Coinbase```\n```Kraken```\n```CoinbasePro```\n```CryptoCom```\n```Binance```\n```Gemini```\n```OkCoin```\n```Bittrex```\n```KuCoin```\n```Etoro```\n```CexIo```\n```BinanceInternational```\n```Bitstamp```\n```GateIo```\n```Acorns```\n```Okx```\n```BitFlyer```\n```Coinlist```\n```Huobi```\n```Bitfinex```\n```KrakenDirect```\n```Vanguard```\n```BinanceInternationalDirect```\n```BitfinexDirect```\n```Bybit```\n"
    },
    {
      "name": "Transactions",
      "description": "\n\n### Supported integrations:\n```Robinhood```\n```ETrade```\n```Alpaca```\n```TdAmeritrade```\n```WeBull```\n```Stash```\n```InteractiveBrokers```\n```Public```\n```Coinbase```\n```Kraken```\n```CoinbasePro```\n```CryptoCom```\n```Binance```\n```Gemini```\n```OkCoin```\n```Bittrex```\n```KuCoin```\n```Etoro```\n```CexIo```\n```BinanceInternational```\n```Bitstamp```\n```GateIo```\n```Okx```\n```BitFlyer```\n```Coinlist```\n```Huobi```\n```Bitfinex```\n```KrakenDirect```\n```Vanguard```\n```BinanceInternationalDirect```\n```Bybit```\n\n\n### Integration-specific notes:\n\n\n#### TdAmeritrade:\n\n\nBecause of limitations of TD Ameritrade API, it is not guaranteed that details of a new order\n\nwill be returned upon executing it.\n\n\n#### Binance:\n\n\nBecause of limitations of Binance API, initial loading of transaction history in Binance can take long time\n\ndepending on the size of the portfolio.\n\n\n#### OkCoin:\n\n\nGetting transactions history from OkCoin is not currently supported.\n"
    },
    {
      "name": "Transfers",
      "description": "\n\n### Supported integrations:\n```Robinhood```\n```Coinbase```\n```Kraken```\n```CoinbasePro```\n```CryptoCom```\n```Binance```\n```Gemini```\n```OkCoin```\n```Bittrex```\n```KuCoin```\n```BinanceInternational```\n```Bitstamp```\n```GateIo```\n```Okx```\n```Huobi```\n```Bitfinex```\n```KrakenDirect```\n```BinanceInternationalDirect```\n```Bybit```\n```DeFiWallet```\n\n\n### Integration-specific notes:\n\n\n#### Robinhood:\n\n\nCryptocurrency transfers should be enabled in Robinhood settings. Transfers are disabled by default, enabling them for end users requires a review from Robinhood.\n\nPlease note:\n * `MfaCode` parameter is required to initiate a transaction in Robinhood.\n * The user's security settings should be configured to use an authenticator application.\n * Robinhood doesn't allow initiation of transactions if the authenticator application is not configured.\n\n\n#### Coinbase:\n\n\n`MfaCode` parameter should be used to initiate transactions in Coinbase.\n * If the end user's Coinbase account is configured to use text messages (SMS) for two factor authentication, the API will return `MfaRequired` status, and a text code will then be sent by Coinbase. The code is expected to be provided in the subsequent call using the `MfaCode` request field\n * If the account is configured to use an authenticator application, the API is expecting to get the code in the `MfaCode` request field.\n\n\n#### Kraken:\n\n\nKraken requires the explicit chain name to be provided (e.g. `Dogecoin` or `Ethereum (ERC20)`). The list of possible chains can be obtained by calling `symbol/details` endpoint.\n\nTo initiate a transaction, a Kraken Address Key name should be provided in `TargetAddress` field. Target address should be added using Kraken UI, then its name should be used.\n\n\n#### CoinbasePro:\n * CoinbasePro does not provide multiple chains per a symbol, so default chains are used for getting Deposit addresses.\n\n\n#### Binance:\n\n\n`Enable Withdrawals` permission should be given to the user's API key to initiate transfers with Binance Us.\n\nBinance requires adding the IP address to the list of trusted IPs to be able to create API keys with transfer permission.\n * Please reach out to Front to get the static IP address. This address should be provided to the end user, and the user should be instructed to add it to the list of trusted IP addresses.\n * By default, the permission to enable withdrawals is turned off. If the end user's API key does not have the permission, asset transfers will not be available.\n\n\n#### KuCoin:\n\n\nKuCoin requires adding the IP address to the list of trusted IPs to be able to create API keys with transfer permission.\n\n`Fee` parameter should be used to initiate a transaction in KuCoin.\n\nPlease note:\n * Please reach out to Front to get the static IP address. This address should be provided to the end user, and the user should be instructed to add it to the list of trusted IP addresses.\n * All currencies have their minimum `fee` and `amount` requirements. Please use `symbol/details` endpoint to get this data for a particular symbol.\n * KuCoin requires chain name to be provided for getting deposit address or initiating a cryptocurrency transfer. Some cryptocurrencies are supported over multiple chains. It's recommended to use `symbol/details` endpoint to get the list of supported chains and show it to the end user to select a target one.\n\n\n#### BinanceInternational:\n\n\n`Enable Withdrawals` permission should be given to the user's API key to initiate transfers with Binance International.\n\nBinance requires adding the IP address to the list of trusted IPs to be able to create API keys with transfer permission.\n * Please reach out to Front to get the static IP address. This address should be provided to the end user, and the user should be instructed to add it to the list of trusted IP addresses.\n * By default, the permission to enable withdrawals is turned off. If the end user's API key does not have the permission, asset transfers will not be available.\n\n\n#### GateIo:\n\n\nGate.io requires adding IP address to the list of trusted IP addresses to be able to initiate a cryptocurrency transfers.\n\nWithdrawal address should be already verified or added on the Gate.io UI (in mobile application or on the web site).\n * Please reach out to Front to get the static IP address for withdrawals. This address should be provided to the end user, and the user should be instructed to add it to the list of trusted IP addresses.\n * Only verified withdrawal blockchain addresses are allowed for withdrawal with Gate.io API.\n * Gate.io requires chain name to be provided for getting deposit address or initiating a cryptocurrency transfer. Some cryptocurrencies are supported over multiple chains. It's recommended to use `symbol/details` endpoint to get the list of supported chains and show it to the end user to select a target one.\n\n\n#### Huobi:\n\n\nWarning: Huobi does not refund executed deposits that are below the `Minimum Deposit Amount`\n * Please check the MinimumDepositAmount in Get Deposit Address response in order to avoid making a deposit below the minimum amount\n * Huobi does not allow withdrawals to addresses that are not white-listed, please add the address that you would like to withdraw to the white list of addresses through the UI so that a withrawal can be processed\n\n\n#### Bitfinex:\n * The hash of transfer is not available when making a transfer in Bitfinex. To get the hash please re-query the transfer using the transaction id.\n * Bitfinex does not separate sub-accounts when returning the list of transfers.Therefore the same list of transfers is returned for all Bitfinex sub-accounts.\n\n\n#### KrakenDirect:\n\n\nKraken requires the explicit chain name to be provided (e.g. `Dogecoin` or `Ethereum (ERC20)`). The list of possible chains can be obtained by calling `symbol/details` endpoint.\n\nTo initiate a transaction, a Kraken Address Key name should be provided in `TargetAddress` field. Target address should be added using Kraken UI, then its name should be used.\n"
    },
    {
      "name": "Assets"
    },
    {
      "name": "Managed Transfers"
    }
  ]
}